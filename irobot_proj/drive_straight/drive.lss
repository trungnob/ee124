
drive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000008fa  0000098e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008fa  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000071  00800104  00800104  00000992  2**0
                  ALLOC
  3 .noinit       00000000  00800175  00800175  00000992  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000992  2**0
                  CONTENTS
  5 .stab         0000036c  00000000  00000000  00000994  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000084  00000000  00000000  00000d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000014  00000000  00000000  00000d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000012f  00000000  00000000  00000d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000035a  00000000  00000000  00000ec7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000000ea  00000000  00000000  00001221  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000006fc  00000000  00000000  0000130b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000001bc  00000000  00000000  00001a07  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  2c:	0c 94 a3 01 	jmp	0x346 <__vector_11>
  30:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  48:	0c 94 7b 01 	jmp	0x2f6 <__vector_18>
  4c:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ef       	ldi	r30, 0xFA	; 250
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 37       	cpi	r26, 0x75	; 117
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0c 94 41 02 	jmp	0x482 <main>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0x0 <__vectors>

000000a2 <initialize>:

// Initialize the Mind Control's ATmega168 microcontroller
void initialize(void)
{
  cli();
  a2:	f8 94       	cli

  // Set I/O pins
  DDRB = 0x10;
  a4:	80 e1       	ldi	r24, 0x10	; 16
  a6:	84 b9       	out	0x04, r24	; 4
  PORTB = 0xCF;
  a8:	8f ec       	ldi	r24, 0xCF	; 207
  aa:	85 b9       	out	0x05, r24	; 5
  DDRC = 0x00;
  ac:	17 b8       	out	0x07, r1	; 7
  PORTC = 0xFF;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	88 b9       	out	0x08, r24	; 8
  DDRD = 0xE6;
  b2:	86 ee       	ldi	r24, 0xE6	; 230
  b4:	8a b9       	out	0x0a, r24	; 10
  PORTD = 0x7D;
  b6:	8d e7       	ldi	r24, 0x7D	; 125
  b8:	8b b9       	out	0x0b, r24	; 11

  // Set up timer 1 to generate an interrupt every 1 ms
  TCCR1A = 0x00;
  ba:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = (_BV(WGM12) | _BV(CS12));
  be:	8c e0       	ldi	r24, 0x0C	; 12
  c0:	80 93 81 00 	sts	0x0081, r24
  OCR1A = 71;
  c4:	87 e4       	ldi	r24, 0x47	; 71
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	90 93 89 00 	sts	0x0089, r25
  cc:	80 93 88 00 	sts	0x0088, r24
  TIMSK1 = _BV(OCIE1A);
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	80 93 6f 00 	sts	0x006F, r24

  // Set up the serial port with rx interrupt
  UBRR0 = 19;
  d6:	83 e1       	ldi	r24, 0x13	; 19
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	90 93 c5 00 	sts	0x00C5, r25
  de:	80 93 c4 00 	sts	0x00C4, r24
  UCSR0B = (_BV(RXCIE0) | _BV(TXEN0) | _BV(RXEN0));
  e2:	88 e9       	ldi	r24, 0x98	; 152
  e4:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = (_BV(UCSZ00) | _BV(UCSZ01));
  e8:	86 e0       	ldi	r24, 0x06	; 6
  ea:	80 93 c2 00 	sts	0x00C2, r24

  // Turn on interrupts
  sei();
  ee:	78 94       	sei
  f0:	08 95       	ret

000000f2 <byteTx>:
  f2:	98 2f       	mov	r25, r24
  f4:	80 91 c0 00 	lds	r24, 0x00C0
  f8:	85 ff       	sbrs	r24, 5
  fa:	fc cf       	rjmp	.-8      	; 0xf4 <byteTx+0x2>
  fc:	90 93 c6 00 	sts	0x00C6, r25
 100:	08 95       	ret

00000102 <defineSongs>:
}




void powerOnRobot(void)
{
  // If Create's power is off, turn it on
  if(!RobotIsOn)
  {
      while(!RobotIsOn)
      {
          RobotPwrToggleLow;
          delayMs(500);  // Delay in this state
          RobotPwrToggleHigh;  // Low to high transition to toggle power
          delayMs(100);  // Delay in this state
          RobotPwrToggleLow;
      }
      delayMs(3500);  // Delay for startup
  }
}




// Switch the baud rate on both Create and module
void baud(uint8_t baud_code)
{
  if(baud_code <= 11)
  {
    byteTx(CmdBaud);
    UCSR0A |= _BV(TXC0);
    byteTx(baud_code);
    // Wait until transmit is complete
    while(!(UCSR0A & _BV(TXC0))) ;

    cli();

    // Switch the baud rate register
    if(baud_code == Baud115200)
      UBRR0 = Ubrr115200;
    else if(baud_code == Baud57600)
      UBRR0 = Ubrr57600;
    else if(baud_code == Baud38400)
      UBRR0 = Ubrr38400;
    else if(baud_code == Baud28800)
      UBRR0 = Ubrr28800;
    else if(baud_code == Baud19200)
      UBRR0 = Ubrr19200;
    else if(baud_code == Baud14400)
      UBRR0 = Ubrr14400;
    else if(baud_code == Baud9600)
      UBRR0 = Ubrr9600;
    else if(baud_code == Baud4800)
      UBRR0 = Ubrr4800;
    else if(baud_code == Baud2400)
      UBRR0 = Ubrr2400;
    else if(baud_code == Baud1200)
      UBRR0 = Ubrr1200;
    else if(baud_code == Baud600)
      UBRR0 = Ubrr600;
    else if(baud_code == Baud300)
      UBRR0 = Ubrr300;

    sei();

    delayMs(100);
  }
}




// Send Create drive commands in terms of velocity and radius
void drive(int16_t velocity, int16_t radius)
{
  byteTx(CmdDrive);
  byteTx((uint8_t)((velocity >> 8) & 0x00FF));
  byteTx((uint8_t)(velocity & 0x00FF));
  byteTx((uint8_t)((radius >> 8) & 0x00FF));
  byteTx((uint8_t)(radius & 0x00FF));
}




// Return an angle value in the range 53 to 180 (degrees)
uint16_t randomAngle(void)
{
    return (53 + ((uint16_t)(random() & 0xFF) >> 1));
}



// Define songs to be played later
void defineSongs(void)
{
  // Reset song
  byteTx(CmdSong);
 102:	8c e8       	ldi	r24, 0x8C	; 140
 104:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(RESET_SONG);
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(4);
 10e:	84 e0       	ldi	r24, 0x04	; 4
 110:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(60);
 114:	8c e3       	ldi	r24, 0x3C	; 60
 116:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(6);
 11a:	86 e0       	ldi	r24, 0x06	; 6
 11c:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(72);
 120:	88 e4       	ldi	r24, 0x48	; 72
 122:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(6);
 126:	86 e0       	ldi	r24, 0x06	; 6
 128:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(84);
 12c:	84 e5       	ldi	r24, 0x54	; 84
 12e:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(6);
 132:	86 e0       	ldi	r24, 0x06	; 6
 134:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(96);
 138:	80 e6       	ldi	r24, 0x60	; 96
 13a:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(6);
 13e:	86 e0       	ldi	r24, 0x06	; 6
 140:	0e 94 79 00 	call	0xf2 <byteTx>

  // Start song
  byteTx(CmdSong);
 144:	8c e8       	ldi	r24, 0x8C	; 140
 146:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(START_SONG);
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(6);
 150:	86 e0       	ldi	r24, 0x06	; 6
 152:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(69);
 156:	85 e4       	ldi	r24, 0x45	; 69
 158:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(18);
 15c:	82 e1       	ldi	r24, 0x12	; 18
 15e:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(72);
 162:	88 e4       	ldi	r24, 0x48	; 72
 164:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(12);
 168:	8c e0       	ldi	r24, 0x0C	; 12
 16a:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(74);
 16e:	8a e4       	ldi	r24, 0x4A	; 74
 170:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(12);
 174:	8c e0       	ldi	r24, 0x0C	; 12
 176:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(72);
 17a:	88 e4       	ldi	r24, 0x48	; 72
 17c:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(12);
 180:	8c e0       	ldi	r24, 0x0C	; 12
 182:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(69);
 186:	85 e4       	ldi	r24, 0x45	; 69
 188:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(12);
 18c:	8c e0       	ldi	r24, 0x0C	; 12
 18e:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(77);
 192:	8d e4       	ldi	r24, 0x4D	; 77
 194:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(24);
 198:	88 e1       	ldi	r24, 0x18	; 24
 19a:	0e 94 79 00 	call	0xf2 <byteTx>

  // Bump song
  byteTx(CmdSong);
 19e:	8c e8       	ldi	r24, 0x8C	; 140
 1a0:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(BUMP_SONG);
 1a4:	82 e0       	ldi	r24, 0x02	; 2
 1a6:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(2);
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(74);
 1b0:	8a e4       	ldi	r24, 0x4A	; 74
 1b2:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(12);
 1b6:	8c e0       	ldi	r24, 0x0C	; 12
 1b8:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(59);
 1bc:	8b e3       	ldi	r24, 0x3B	; 59
 1be:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(24);
 1c2:	88 e1       	ldi	r24, 0x18	; 24
 1c4:	0e 94 79 00 	call	0xf2 <byteTx>

  // End song
  byteTx(CmdSong);
 1c8:	8c e8       	ldi	r24, 0x8C	; 140
 1ca:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(END_SONG);
 1ce:	83 e0       	ldi	r24, 0x03	; 3
 1d0:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(5);
 1d4:	85 e0       	ldi	r24, 0x05	; 5
 1d6:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(77);
 1da:	8d e4       	ldi	r24, 0x4D	; 77
 1dc:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(18);
 1e0:	82 e1       	ldi	r24, 0x12	; 18
 1e2:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(74);
 1e6:	8a e4       	ldi	r24, 0x4A	; 74
 1e8:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(12);
 1ec:	8c e0       	ldi	r24, 0x0C	; 12
 1ee:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(72);
 1f2:	88 e4       	ldi	r24, 0x48	; 72
 1f4:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(12);
 1f8:	8c e0       	ldi	r24, 0x0C	; 12
 1fa:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(69);
 1fe:	85 e4       	ldi	r24, 0x45	; 69
 200:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(12);
 204:	8c e0       	ldi	r24, 0x0C	; 12
 206:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(65);
 20a:	81 e4       	ldi	r24, 0x41	; 65
 20c:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(24);
 210:	88 e1       	ldi	r24, 0x18	; 24
 212:	0e 94 79 00 	call	0xf2 <byteTx>
 216:	08 95       	ret

00000218 <drive>:
 218:	ef 92       	push	r14
 21a:	ff 92       	push	r15
 21c:	0f 93       	push	r16
 21e:	1f 93       	push	r17
 220:	8c 01       	movw	r16, r24
 222:	7b 01       	movw	r14, r22
 224:	89 e8       	ldi	r24, 0x89	; 137
 226:	0e 94 79 00 	call	0xf2 <byteTx>
 22a:	81 2f       	mov	r24, r17
 22c:	99 27       	eor	r25, r25
 22e:	87 fd       	sbrc	r24, 7
 230:	9a 95       	dec	r25
 232:	0e 94 79 00 	call	0xf2 <byteTx>
 236:	80 2f       	mov	r24, r16
 238:	0e 94 79 00 	call	0xf2 <byteTx>
 23c:	8f 2d       	mov	r24, r15
 23e:	99 27       	eor	r25, r25
 240:	87 fd       	sbrc	r24, 7
 242:	9a 95       	dec	r25
 244:	0e 94 79 00 	call	0xf2 <byteTx>
 248:	8e 2d       	mov	r24, r14
 24a:	0e 94 79 00 	call	0xf2 <byteTx>
 24e:	1f 91       	pop	r17
 250:	0f 91       	pop	r16
 252:	ff 90       	pop	r15
 254:	ef 90       	pop	r14
 256:	08 95       	ret

00000258 <delayAndUpdateSensors>:
 258:	21 e0       	ldi	r18, 0x01	; 1
 25a:	20 93 0a 01 	sts	0x010A, r18
 25e:	90 93 0c 01 	sts	0x010C, r25
 262:	80 93 0b 01 	sts	0x010B, r24
 266:	80 91 0a 01 	lds	r24, 0x010A
 26a:	88 23       	and	r24, r24
 26c:	09 f4       	brne	.+2      	; 0x270 <delayAndUpdateSensors+0x18>
 26e:	42 c0       	rjmp	.+132    	; 0x2f4 <delayAndUpdateSensors+0x9c>
 270:	80 91 09 01 	lds	r24, 0x0109
 274:	88 23       	and	r24, r24
 276:	b9 f7       	brne	.-18     	; 0x266 <delayAndUpdateSensors+0xe>
 278:	ad e0       	ldi	r26, 0x0D	; 13
 27a:	b1 e0       	ldi	r27, 0x01	; 1
 27c:	e1 e4       	ldi	r30, 0x41	; 65
 27e:	f1 e0       	ldi	r31, 0x01	; 1
 280:	93 e3       	ldi	r25, 0x33	; 51
 282:	8d 91       	ld	r24, X+
 284:	81 93       	st	Z+, r24
 286:	91 50       	subi	r25, 0x01	; 1
 288:	97 ff       	sbrs	r25, 7
 28a:	fb cf       	rjmp	.-10     	; 0x282 <delayAndUpdateSensors+0x2a>
 28c:	80 91 4d 01 	lds	r24, 0x014D
 290:	99 27       	eor	r25, r25
 292:	38 2f       	mov	r19, r24
 294:	22 27       	eor	r18, r18
 296:	80 91 4e 01 	lds	r24, 0x014E
 29a:	99 27       	eor	r25, r25
 29c:	28 2b       	or	r18, r24
 29e:	39 2b       	or	r19, r25
 2a0:	80 91 06 01 	lds	r24, 0x0106
 2a4:	90 91 07 01 	lds	r25, 0x0107
 2a8:	82 0f       	add	r24, r18
 2aa:	93 1f       	adc	r25, r19
 2ac:	90 93 07 01 	sts	0x0107, r25
 2b0:	80 93 06 01 	sts	0x0106, r24
 2b4:	80 91 4f 01 	lds	r24, 0x014F
 2b8:	99 27       	eor	r25, r25
 2ba:	38 2f       	mov	r19, r24
 2bc:	22 27       	eor	r18, r18
 2be:	80 91 50 01 	lds	r24, 0x0150
 2c2:	99 27       	eor	r25, r25
 2c4:	28 2b       	or	r18, r24
 2c6:	39 2b       	or	r19, r25
 2c8:	80 91 04 01 	lds	r24, 0x0104
 2cc:	90 91 05 01 	lds	r25, 0x0105
 2d0:	82 0f       	add	r24, r18
 2d2:	93 1f       	adc	r25, r19
 2d4:	90 93 05 01 	sts	0x0105, r25
 2d8:	80 93 04 01 	sts	0x0104, r24
 2dc:	8e e8       	ldi	r24, 0x8E	; 142
 2de:	0e 94 79 00 	call	0xf2 <byteTx>
 2e2:	86 e0       	ldi	r24, 0x06	; 6
 2e4:	0e 94 79 00 	call	0xf2 <byteTx>
 2e8:	10 92 08 01 	sts	0x0108, r1
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	80 93 09 01 	sts	0x0109, r24
 2f2:	b9 cf       	rjmp	.-142    	; 0x266 <delayAndUpdateSensors+0xe>
 2f4:	08 95       	ret

000002f6 <__vector_18>:
 2f6:	1f 92       	push	r1
 2f8:	0f 92       	push	r0
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	0f 92       	push	r0
 2fe:	11 24       	eor	r1, r1
 300:	8f 93       	push	r24
 302:	9f 93       	push	r25
 304:	ef 93       	push	r30
 306:	ff 93       	push	r31
 308:	90 91 c6 00 	lds	r25, 0x00C6
 30c:	80 91 09 01 	lds	r24, 0x0109
 310:	88 23       	and	r24, r24
 312:	81 f0       	breq	.+32     	; 0x334 <__vector_18+0x3e>
 314:	80 91 08 01 	lds	r24, 0x0108
 318:	e8 2f       	mov	r30, r24
 31a:	ff 27       	eor	r31, r31
 31c:	e3 5f       	subi	r30, 0xF3	; 243
 31e:	fe 4f       	sbci	r31, 0xFE	; 254
 320:	90 83       	st	Z, r25
 322:	8f 5f       	subi	r24, 0xFF	; 255
 324:	80 93 08 01 	sts	0x0108, r24
 328:	80 91 08 01 	lds	r24, 0x0108
 32c:	84 33       	cpi	r24, 0x34	; 52
 32e:	10 f0       	brcs	.+4      	; 0x334 <__vector_18+0x3e>
 330:	10 92 09 01 	sts	0x0109, r1
 334:	ff 91       	pop	r31
 336:	ef 91       	pop	r30
 338:	9f 91       	pop	r25
 33a:	8f 91       	pop	r24
 33c:	0f 90       	pop	r0
 33e:	0f be       	out	0x3f, r0	; 63
 340:	0f 90       	pop	r0
 342:	1f 90       	pop	r1
 344:	18 95       	reti

00000346 <__vector_11>:
 346:	1f 92       	push	r1
 348:	0f 92       	push	r0
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	0f 92       	push	r0
 34e:	11 24       	eor	r1, r1
 350:	8f 93       	push	r24
 352:	9f 93       	push	r25
 354:	80 91 0b 01 	lds	r24, 0x010B
 358:	90 91 0c 01 	lds	r25, 0x010C
 35c:	89 2b       	or	r24, r25
 35e:	51 f0       	breq	.+20     	; 0x374 <__vector_11+0x2e>
 360:	80 91 0b 01 	lds	r24, 0x010B
 364:	90 91 0c 01 	lds	r25, 0x010C
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	90 93 0c 01 	sts	0x010C, r25
 36e:	80 93 0b 01 	sts	0x010B, r24
 372:	02 c0       	rjmp	.+4      	; 0x378 <__vector_11+0x32>
 374:	10 92 0a 01 	sts	0x010A, r1
 378:	9f 91       	pop	r25
 37a:	8f 91       	pop	r24
 37c:	0f 90       	pop	r0
 37e:	0f be       	out	0x3f, r0	; 63
 380:	0f 90       	pop	r0
 382:	1f 90       	pop	r1
 384:	18 95       	reti

00000386 <delayMs>:
 386:	9c 01       	movw	r18, r24
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	80 93 0a 01 	sts	0x010A, r24
 38e:	30 93 0c 01 	sts	0x010C, r19
 392:	20 93 0b 01 	sts	0x010B, r18
 396:	80 91 0a 01 	lds	r24, 0x010A
 39a:	88 23       	and	r24, r24
 39c:	e1 f7       	brne	.-8      	; 0x396 <delayMs+0x10>
 39e:	08 95       	ret

000003a0 <baud>:
 3a0:	cf 93       	push	r28
 3a2:	c8 2f       	mov	r28, r24
 3a4:	8c 30       	cpi	r24, 0x0C	; 12
 3a6:	08 f0       	brcs	.+2      	; 0x3aa <baud+0xa>
 3a8:	54 c0       	rjmp	.+168    	; 0x452 <baud+0xb2>
 3aa:	81 e8       	ldi	r24, 0x81	; 129
 3ac:	0e 94 79 00 	call	0xf2 <byteTx>
 3b0:	80 91 c0 00 	lds	r24, 0x00C0
 3b4:	80 64       	ori	r24, 0x40	; 64
 3b6:	80 93 c0 00 	sts	0x00C0, r24
 3ba:	8c 2f       	mov	r24, r28
 3bc:	0e 94 79 00 	call	0xf2 <byteTx>
 3c0:	80 91 c0 00 	lds	r24, 0x00C0
 3c4:	86 ff       	sbrs	r24, 6
 3c6:	fc cf       	rjmp	.-8      	; 0x3c0 <baud+0x20>
 3c8:	f8 94       	cli
 3ca:	cb 30       	cpi	r28, 0x0B	; 11
 3cc:	19 f4       	brne	.+6      	; 0x3d4 <baud+0x34>
 3ce:	89 e0       	ldi	r24, 0x09	; 9
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	36 c0       	rjmp	.+108    	; 0x440 <baud+0xa0>
 3d4:	ca 30       	cpi	r28, 0x0A	; 10
 3d6:	19 f4       	brne	.+6      	; 0x3de <baud+0x3e>
 3d8:	83 e1       	ldi	r24, 0x13	; 19
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	31 c0       	rjmp	.+98     	; 0x440 <baud+0xa0>
 3de:	c9 30       	cpi	r28, 0x09	; 9
 3e0:	19 f4       	brne	.+6      	; 0x3e8 <baud+0x48>
 3e2:	8d e1       	ldi	r24, 0x1D	; 29
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	2c c0       	rjmp	.+88     	; 0x440 <baud+0xa0>
 3e8:	c8 30       	cpi	r28, 0x08	; 8
 3ea:	19 f4       	brne	.+6      	; 0x3f2 <baud+0x52>
 3ec:	87 e2       	ldi	r24, 0x27	; 39
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	27 c0       	rjmp	.+78     	; 0x440 <baud+0xa0>
 3f2:	c7 30       	cpi	r28, 0x07	; 7
 3f4:	19 f4       	brne	.+6      	; 0x3fc <baud+0x5c>
 3f6:	8b e3       	ldi	r24, 0x3B	; 59
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	22 c0       	rjmp	.+68     	; 0x440 <baud+0xa0>
 3fc:	c6 30       	cpi	r28, 0x06	; 6
 3fe:	19 f4       	brne	.+6      	; 0x406 <baud+0x66>
 400:	8f e4       	ldi	r24, 0x4F	; 79
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	1d c0       	rjmp	.+58     	; 0x440 <baud+0xa0>
 406:	c5 30       	cpi	r28, 0x05	; 5
 408:	19 f4       	brne	.+6      	; 0x410 <baud+0x70>
 40a:	87 e7       	ldi	r24, 0x77	; 119
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	18 c0       	rjmp	.+48     	; 0x440 <baud+0xa0>
 410:	c4 30       	cpi	r28, 0x04	; 4
 412:	19 f4       	brne	.+6      	; 0x41a <baud+0x7a>
 414:	8f ee       	ldi	r24, 0xEF	; 239
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	13 c0       	rjmp	.+38     	; 0x440 <baud+0xa0>
 41a:	c3 30       	cpi	r28, 0x03	; 3
 41c:	19 f4       	brne	.+6      	; 0x424 <baud+0x84>
 41e:	8f ed       	ldi	r24, 0xDF	; 223
 420:	91 e0       	ldi	r25, 0x01	; 1
 422:	0e c0       	rjmp	.+28     	; 0x440 <baud+0xa0>
 424:	c2 30       	cpi	r28, 0x02	; 2
 426:	19 f4       	brne	.+6      	; 0x42e <baud+0x8e>
 428:	8f eb       	ldi	r24, 0xBF	; 191
 42a:	93 e0       	ldi	r25, 0x03	; 3
 42c:	09 c0       	rjmp	.+18     	; 0x440 <baud+0xa0>
 42e:	c1 30       	cpi	r28, 0x01	; 1
 430:	19 f4       	brne	.+6      	; 0x438 <baud+0x98>
 432:	8f e7       	ldi	r24, 0x7F	; 127
 434:	97 e0       	ldi	r25, 0x07	; 7
 436:	04 c0       	rjmp	.+8      	; 0x440 <baud+0xa0>
 438:	cc 23       	and	r28, r28
 43a:	31 f4       	brne	.+12     	; 0x448 <baud+0xa8>
 43c:	8f ef       	ldi	r24, 0xFF	; 255
 43e:	9e e0       	ldi	r25, 0x0E	; 14
 440:	90 93 c5 00 	sts	0x00C5, r25
 444:	80 93 c4 00 	sts	0x00C4, r24
 448:	78 94       	sei
 44a:	84 e6       	ldi	r24, 0x64	; 100
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 c3 01 	call	0x386 <delayMs>
 452:	cf 91       	pop	r28
 454:	08 95       	ret

00000456 <powerOnRobot>:
 456:	1d 99       	sbic	0x03, 5	; 3
 458:	13 c0       	rjmp	.+38     	; 0x480 <powerOnRobot+0x2a>
 45a:	1d 99       	sbic	0x03, 5	; 3
 45c:	0d c0       	rjmp	.+26     	; 0x478 <powerOnRobot+0x22>
 45e:	5f 98       	cbi	0x0b, 7	; 11
 460:	84 ef       	ldi	r24, 0xF4	; 244
 462:	91 e0       	ldi	r25, 0x01	; 1
 464:	0e 94 c3 01 	call	0x386 <delayMs>
 468:	5f 9a       	sbi	0x0b, 7	; 11
 46a:	84 e6       	ldi	r24, 0x64	; 100
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 c3 01 	call	0x386 <delayMs>
 472:	5f 98       	cbi	0x0b, 7	; 11
 474:	1d 9b       	sbis	0x03, 5	; 3
 476:	f3 cf       	rjmp	.-26     	; 0x45e <powerOnRobot+0x8>
 478:	8c ea       	ldi	r24, 0xAC	; 172
 47a:	9d e0       	ldi	r25, 0x0D	; 13
 47c:	0e 94 c3 01 	call	0x386 <delayMs>
 480:	08 95       	ret

00000482 <main>:
 482:	cf ef       	ldi	r28, 0xFF	; 255
 484:	d4 e0       	ldi	r29, 0x04	; 4
 486:	de bf       	out	0x3e, r29	; 62
 488:	cd bf       	out	0x3d, r28	; 61
 48a:	13 e6       	ldi	r17, 0x63	; 99
 48c:	c0 e0       	ldi	r28, 0x00	; 0
 48e:	e1 e0       	ldi	r30, 0x01	; 1
 490:	de 2e       	mov	r13, r30
 492:	ee 24       	eor	r14, r14
 494:	ff 24       	eor	r15, r15
 496:	0d 2d       	mov	r16, r13
 498:	cc 2e       	mov	r12, r28
 49a:	bc 2e       	mov	r11, r28
 49c:	ad 2c       	mov	r10, r13
 49e:	0e 94 51 00 	call	0xa2 <initialize>
 4a2:	8b b1       	in	r24, 0x0b	; 11
 4a4:	80 66       	ori	r24, 0x60	; 96
 4a6:	8b b9       	out	0x0b, r24	; 11
 4a8:	0e 94 2b 02 	call	0x456 <powerOnRobot>
 4ac:	80 e8       	ldi	r24, 0x80	; 128
 4ae:	0e 94 79 00 	call	0xf2 <byteTx>
 4b2:	88 e0       	ldi	r24, 0x08	; 8
 4b4:	0e 94 d0 01 	call	0x3a0 <baud>
 4b8:	0e 94 81 00 	call	0x102 <defineSongs>
 4bc:	82 e8       	ldi	r24, 0x82	; 130
 4be:	0e 94 79 00 	call	0xf2 <byteTx>
 4c2:	84 e8       	ldi	r24, 0x84	; 132
 4c4:	0e 94 79 00 	call	0xf2 <byteTx>
 4c8:	60 e0       	ldi	r22, 0x00	; 0
 4ca:	70 e8       	ldi	r23, 0x80	; 128
 4cc:	c7 01       	movw	r24, r14
 4ce:	0e 94 0c 01 	call	0x218 <drive>
 4d2:	8d e8       	ldi	r24, 0x8D	; 141
 4d4:	0e 94 79 00 	call	0xf2 <byteTx>
 4d8:	8c 2f       	mov	r24, r28
 4da:	0e 94 79 00 	call	0xf2 <byteTx>
 4de:	8e ee       	ldi	r24, 0xEE	; 238
 4e0:	92 e0       	ldi	r25, 0x02	; 2
 4e2:	0e 94 2c 01 	call	0x258 <delayAndUpdateSensors>
 4e6:	1f 5f       	subi	r17, 0xFF	; 255
 4e8:	14 36       	cpi	r17, 0x64	; 100
 4ea:	30 f1       	brcs	.+76     	; 0x538 <__stack+0x39>
 4ec:	10 e0       	ldi	r17, 0x00	; 0
 4ee:	81 2f       	mov	r24, r17
 4f0:	dd 20       	and	r13, r13
 4f2:	09 f4       	brne	.+2      	; 0x4f6 <main+0x74>
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	d8 2e       	mov	r13, r24
 4f8:	88 23       	and	r24, r24
 4fa:	79 f0       	breq	.+30     	; 0x51a <__stack+0x1b>
 4fc:	8b e8       	ldi	r24, 0x8B	; 139
 4fe:	0e 94 79 00 	call	0xf2 <byteTx>
 502:	8a e0       	ldi	r24, 0x0A	; 10
 504:	0e 94 79 00 	call	0xf2 <byteTx>
 508:	80 e8       	ldi	r24, 0x80	; 128
 50a:	0e 94 79 00 	call	0xf2 <byteTx>
 50e:	8f ef       	ldi	r24, 0xFF	; 255
 510:	0e 94 79 00 	call	0xf2 <byteTx>
 514:	8b b1       	in	r24, 0x0b	; 11
 516:	80 66       	ori	r24, 0x60	; 96
 518:	0e c0       	rjmp	.+28     	; 0x536 <__stack+0x37>
 51a:	8b e8       	ldi	r24, 0x8B	; 139
 51c:	0e 94 79 00 	call	0xf2 <byteTx>
 520:	81 2f       	mov	r24, r17
 522:	0e 94 79 00 	call	0xf2 <byteTx>
 526:	81 2f       	mov	r24, r17
 528:	0e 94 79 00 	call	0xf2 <byteTx>
 52c:	81 2f       	mov	r24, r17
 52e:	0e 94 79 00 	call	0xf2 <byteTx>
 532:	8b b1       	in	r24, 0x0b	; 11
 534:	8f 79       	andi	r24, 0x9F	; 159
 536:	8b b9       	out	0x0b, r24	; 11
 538:	8a e0       	ldi	r24, 0x0A	; 10
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	0e 94 2c 01 	call	0x258 <delayAndUpdateSensors>
 540:	4c 99       	sbic	0x09, 4	; 9
 542:	d1 cf       	rjmp	.-94     	; 0x4e6 <main+0x64>
 544:	8d e8       	ldi	r24, 0x8D	; 141
 546:	0e 94 79 00 	call	0xf2 <byteTx>
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	0e 94 79 00 	call	0xf2 <byteTx>
 550:	8d ef       	ldi	r24, 0xFD	; 253
 552:	9a e0       	ldi	r25, 0x0A	; 10
 554:	e0 c0       	rjmp	.+448    	; 0x716 <__stack+0x217>
 556:	cc 20       	and	r12, r12
 558:	91 f1       	breq	.+100    	; 0x5be <__stack+0xbf>
 55a:	bb 20       	and	r11, r11
 55c:	99 f0       	breq	.+38     	; 0x584 <__stack+0x85>
 55e:	80 91 06 01 	lds	r24, 0x0106
 562:	90 91 07 01 	lds	r25, 0x0107
 566:	90 95       	com	r25
 568:	81 95       	neg	r24
 56a:	9f 4f       	sbci	r25, 0xFF	; 255
 56c:	06 97       	sbiw	r24, 0x06	; 6
 56e:	2c f0       	brlt	.+10     	; 0x57a <__stack+0x7b>
 570:	b2 2e       	mov	r11, r18
 572:	10 92 07 01 	sts	0x0107, r1
 576:	10 92 06 01 	sts	0x0106, r1
 57a:	60 e0       	ldi	r22, 0x00	; 0
 57c:	70 e8       	ldi	r23, 0x80	; 128
 57e:	88 e3       	ldi	r24, 0x38	; 56
 580:	9f ef       	ldi	r25, 0xFF	; 255
 582:	6c c0       	rjmp	.+216    	; 0x65c <__stack+0x15d>
 584:	00 23       	and	r16, r16
 586:	59 f0       	breq	.+22     	; 0x59e <__stack+0x9f>
 588:	80 91 04 01 	lds	r24, 0x0104
 58c:	90 91 05 01 	lds	r25, 0x0105
 590:	e8 16       	cp	r14, r24
 592:	f9 06       	cpc	r15, r25
 594:	0c f4       	brge	.+2      	; 0x598 <__stack+0x99>
 596:	cb 2c       	mov	r12, r11
 598:	61 e0       	ldi	r22, 0x01	; 1
 59a:	70 e0       	ldi	r23, 0x00	; 0
 59c:	0d c0       	rjmp	.+26     	; 0x5b8 <__stack+0xb9>
 59e:	80 91 04 01 	lds	r24, 0x0104
 5a2:	90 91 05 01 	lds	r25, 0x0105
 5a6:	90 95       	com	r25
 5a8:	81 95       	neg	r24
 5aa:	9f 4f       	sbci	r25, 0xFF	; 255
 5ac:	e8 16       	cp	r14, r24
 5ae:	f9 06       	cpc	r15, r25
 5b0:	0c f4       	brge	.+2      	; 0x5b4 <__stack+0xb5>
 5b2:	cb 2c       	mov	r12, r11
 5b4:	6f ef       	ldi	r22, 0xFF	; 255
 5b6:	7f ef       	ldi	r23, 0xFF	; 255
 5b8:	88 ec       	ldi	r24, 0xC8	; 200
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	4f c0       	rjmp	.+158    	; 0x65c <__stack+0x15d>
 5be:	80 e0       	ldi	r24, 0x00	; 0
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	aa 20       	and	r10, r10
 5c4:	11 f4       	brne	.+4      	; 0x5ca <__stack+0xcb>
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	81 70       	andi	r24, 0x01	; 1
 5cc:	90 70       	andi	r25, 0x00	; 0
 5ce:	89 2b       	or	r24, r25
 5d0:	e9 f0       	breq	.+58     	; 0x60c <__stack+0x10d>
 5d2:	80 91 06 01 	lds	r24, 0x0106
 5d6:	90 91 07 01 	lds	r25, 0x0107
 5da:	45 97       	sbiw	r24, 0x15	; 21
 5dc:	a4 f0       	brlt	.+40     	; 0x606 <__stack+0x107>
 5de:	8c 2d       	mov	r24, r12
 5e0:	00 23       	and	r16, r16
 5e2:	09 f4       	brne	.+2      	; 0x5e6 <__stack+0xe7>
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	08 2f       	mov	r16, r24
 5e8:	71 e0       	ldi	r23, 0x01	; 1
 5ea:	a7 2e       	mov	r10, r23
 5ec:	10 92 07 01 	sts	0x0107, r1
 5f0:	10 92 06 01 	sts	0x0106, r1
 5f4:	10 92 05 01 	sts	0x0105, r1
 5f8:	10 92 04 01 	sts	0x0104, r1
 5fc:	ca 2c       	mov	r12, r10
 5fe:	6a e5       	ldi	r22, 0x5A	; 90
 600:	e6 2e       	mov	r14, r22
 602:	f1 2c       	mov	r15, r1
 604:	2d c0       	rjmp	.+90     	; 0x660 <__stack+0x161>
 606:	60 e0       	ldi	r22, 0x00	; 0
 608:	70 e8       	ldi	r23, 0x80	; 128
 60a:	d6 cf       	rjmp	.-84     	; 0x5b8 <__stack+0xb9>
 60c:	80 91 41 01 	lds	r24, 0x0141
 610:	99 27       	eor	r25, r25
 612:	83 70       	andi	r24, 0x03	; 3
 614:	90 70       	andi	r25, 0x00	; 0
 616:	89 2b       	or	r24, r25
 618:	e9 f0       	breq	.+58     	; 0x654 <__stack+0x155>
 61a:	80 91 41 01 	lds	r24, 0x0141
 61e:	81 ff       	sbrs	r24, 1
 620:	02 c0       	rjmp	.+4      	; 0x626 <__stack+0x127>
 622:	0c 2d       	mov	r16, r12
 624:	01 c0       	rjmp	.+2      	; 0x628 <__stack+0x129>
 626:	01 e0       	ldi	r16, 0x01	; 1
 628:	51 e0       	ldi	r21, 0x01	; 1
 62a:	c5 2e       	mov	r12, r21
 62c:	bc 2c       	mov	r11, r12
 62e:	10 92 07 01 	sts	0x0107, r1
 632:	10 92 06 01 	sts	0x0106, r1
 636:	10 92 05 01 	sts	0x0105, r1
 63a:	10 92 04 01 	sts	0x0104, r1
 63e:	4a e5       	ldi	r20, 0x5A	; 90
 640:	e4 2e       	mov	r14, r20
 642:	f1 2c       	mov	r15, r1
 644:	aa 24       	eor	r10, r10
 646:	8d e8       	ldi	r24, 0x8D	; 141
 648:	0e 94 79 00 	call	0xf2 <byteTx>
 64c:	82 e0       	ldi	r24, 0x02	; 2
 64e:	0e 94 79 00 	call	0xf2 <byteTx>
 652:	06 c0       	rjmp	.+12     	; 0x660 <__stack+0x161>
 654:	60 e0       	ldi	r22, 0x00	; 0
 656:	70 e8       	ldi	r23, 0x80	; 128
 658:	8c e2       	ldi	r24, 0x2C	; 44
 65a:	91 e0       	ldi	r25, 0x01	; 1
 65c:	0e 94 0c 01 	call	0x218 <drive>
 660:	1f 5f       	subi	r17, 0xFF	; 255
 662:	1a 30       	cpi	r17, 0x0A	; 10
 664:	08 f4       	brcc	.+2      	; 0x668 <__stack+0x169>
 666:	55 c0       	rjmp	.+170    	; 0x712 <__stack+0x213>
 668:	10 e0       	ldi	r17, 0x00	; 0
 66a:	cc 20       	and	r12, r12
 66c:	31 f0       	breq	.+12     	; 0x67a <__stack+0x17b>
 66e:	cc 23       	and	r28, r28
 670:	11 f4       	brne	.+4      	; 0x676 <__stack+0x177>
 672:	c4 e0       	ldi	r28, 0x04	; 4
 674:	40 c0       	rjmp	.+128    	; 0x6f6 <__stack+0x1f7>
 676:	c1 50       	subi	r28, 0x01	; 1
 678:	05 c0       	rjmp	.+10     	; 0x684 <__stack+0x185>
 67a:	c4 30       	cpi	r28, 0x04	; 4
 67c:	11 f4       	brne	.+4      	; 0x682 <__stack+0x183>
 67e:	cc 2d       	mov	r28, r12
 680:	03 c0       	rjmp	.+6      	; 0x688 <__stack+0x189>
 682:	cf 5f       	subi	r28, 0xFF	; 255
 684:	cc 23       	and	r28, r28
 686:	59 f4       	brne	.+22     	; 0x69e <__stack+0x19f>
 688:	8b e8       	ldi	r24, 0x8B	; 139
 68a:	0e 94 79 00 	call	0xf2 <byteTx>
 68e:	8c 2f       	mov	r24, r28
 690:	0e 94 79 00 	call	0xf2 <byteTx>
 694:	80 e8       	ldi	r24, 0x80	; 128
 696:	0e 94 79 00 	call	0xf2 <byteTx>
 69a:	8f ef       	ldi	r24, 0xFF	; 255
 69c:	13 c0       	rjmp	.+38     	; 0x6c4 <__stack+0x1c5>
 69e:	c1 30       	cpi	r28, 0x01	; 1
 6a0:	29 f4       	brne	.+10     	; 0x6ac <__stack+0x1ad>
 6a2:	8b e8       	ldi	r24, 0x8B	; 139
 6a4:	0e 94 79 00 	call	0xf2 <byteTx>
 6a8:	82 e0       	ldi	r24, 0x02	; 2
 6aa:	06 c0       	rjmp	.+12     	; 0x6b8 <__stack+0x1b9>
 6ac:	c2 30       	cpi	r28, 0x02	; 2
 6ae:	81 f4       	brne	.+32     	; 0x6d0 <__stack+0x1d1>
 6b0:	8b e8       	ldi	r24, 0x8B	; 139
 6b2:	0e 94 79 00 	call	0xf2 <byteTx>
 6b6:	88 e0       	ldi	r24, 0x08	; 8
 6b8:	0e 94 79 00 	call	0xf2 <byteTx>
 6bc:	80 e0       	ldi	r24, 0x00	; 0
 6be:	0e 94 79 00 	call	0xf2 <byteTx>
 6c2:	80 e0       	ldi	r24, 0x00	; 0
 6c4:	0e 94 79 00 	call	0xf2 <byteTx>
 6c8:	8b b1       	in	r24, 0x0b	; 11
 6ca:	80 66       	ori	r24, 0x60	; 96
 6cc:	8b b9       	out	0x0b, r24	; 11
 6ce:	21 c0       	rjmp	.+66     	; 0x712 <__stack+0x213>
 6d0:	c3 30       	cpi	r28, 0x03	; 3
 6d2:	79 f4       	brne	.+30     	; 0x6f2 <__stack+0x1f3>
 6d4:	8b e8       	ldi	r24, 0x8B	; 139
 6d6:	0e 94 79 00 	call	0xf2 <byteTx>
 6da:	80 e0       	ldi	r24, 0x00	; 0
 6dc:	0e 94 79 00 	call	0xf2 <byteTx>
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	0e 94 79 00 	call	0xf2 <byteTx>
 6e6:	80 e0       	ldi	r24, 0x00	; 0
 6e8:	0e 94 79 00 	call	0xf2 <byteTx>
 6ec:	5e 98       	cbi	0x0b, 6	; 11
 6ee:	5d 9a       	sbi	0x0b, 5	; 11
 6f0:	10 c0       	rjmp	.+32     	; 0x712 <__stack+0x213>
 6f2:	c4 30       	cpi	r28, 0x04	; 4
 6f4:	71 f4       	brne	.+28     	; 0x712 <__stack+0x213>
 6f6:	8b e8       	ldi	r24, 0x8B	; 139
 6f8:	0e 94 79 00 	call	0xf2 <byteTx>
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	0e 94 79 00 	call	0xf2 <byteTx>
 702:	80 e0       	ldi	r24, 0x00	; 0
 704:	0e 94 79 00 	call	0xf2 <byteTx>
 708:	80 e0       	ldi	r24, 0x00	; 0
 70a:	0e 94 79 00 	call	0xf2 <byteTx>
 70e:	5d 98       	cbi	0x0b, 5	; 11
 710:	5e 9a       	sbi	0x0b, 6	; 11
 712:	84 e1       	ldi	r24, 0x14	; 20
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	0e 94 2c 01 	call	0x258 <delayAndUpdateSensors>
 71a:	4c 9b       	sbis	0x09, 4	; 9
 71c:	15 c0       	rjmp	.+42     	; 0x748 <__stack+0x249>
 71e:	80 91 43 01 	lds	r24, 0x0143
 722:	88 23       	and	r24, r24
 724:	89 f4       	brne	.+34     	; 0x748 <__stack+0x249>
 726:	80 91 44 01 	lds	r24, 0x0144
 72a:	88 23       	and	r24, r24
 72c:	69 f4       	brne	.+26     	; 0x748 <__stack+0x249>
 72e:	80 91 45 01 	lds	r24, 0x0145
 732:	88 23       	and	r24, r24
 734:	49 f4       	brne	.+18     	; 0x748 <__stack+0x249>
 736:	80 91 46 01 	lds	r24, 0x0146
 73a:	88 23       	and	r24, r24
 73c:	29 f4       	brne	.+10     	; 0x748 <__stack+0x249>
 73e:	20 91 68 01 	lds	r18, 0x0168
 742:	22 23       	and	r18, r18
 744:	09 f4       	brne	.+2      	; 0x748 <__stack+0x249>
 746:	07 cf       	rjmp	.-498    	; 0x556 <__stack+0x57>
 748:	60 e0       	ldi	r22, 0x00	; 0
 74a:	70 e8       	ldi	r23, 0x80	; 128
 74c:	80 e0       	ldi	r24, 0x00	; 0
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	0e 94 0c 01 	call	0x218 <drive>
 754:	84 ef       	ldi	r24, 0xF4	; 244
 756:	91 e0       	ldi	r25, 0x01	; 1
 758:	0e 94 2c 01 	call	0x258 <delayAndUpdateSensors>
 75c:	8d e8       	ldi	r24, 0x8D	; 141
 75e:	0e 94 79 00 	call	0xf2 <byteTx>
 762:	83 e0       	ldi	r24, 0x03	; 3
 764:	0e 94 79 00 	call	0xf2 <byteTx>
 768:	86 e8       	ldi	r24, 0x86	; 134
 76a:	99 e0       	ldi	r25, 0x09	; 9
 76c:	ba ce       	rjmp	.-652    	; 0x4e2 <main+0x60>

0000076e <randomAngle>:
 76e:	0e 94 28 04 	call	0x850 <random>
 772:	dc 01       	movw	r26, r24
 774:	cb 01       	movw	r24, r22
 776:	90 70       	andi	r25, 0x00	; 0
 778:	96 95       	lsr	r25
 77a:	87 95       	ror	r24
 77c:	c5 96       	adiw	r24, 0x35	; 53
 77e:	08 95       	ret

00000780 <do_random>:
 780:	af 92       	push	r10
 782:	bf 92       	push	r11
 784:	cf 92       	push	r12
 786:	df 92       	push	r13
 788:	ef 92       	push	r14
 78a:	ff 92       	push	r15
 78c:	0f 93       	push	r16
 78e:	1f 93       	push	r17
 790:	cf 93       	push	r28
 792:	df 93       	push	r29
 794:	ec 01       	movw	r28, r24
 796:	e8 80       	ld	r14, Y
 798:	f9 80       	ldd	r15, Y+1	; 0x01
 79a:	0a 81       	ldd	r16, Y+2	; 0x02
 79c:	1b 81       	ldd	r17, Y+3	; 0x03
 79e:	c8 01       	movw	r24, r16
 7a0:	b7 01       	movw	r22, r14
 7a2:	2d e1       	ldi	r18, 0x1D	; 29
 7a4:	33 ef       	ldi	r19, 0xF3	; 243
 7a6:	41 e0       	ldi	r20, 0x01	; 1
 7a8:	50 e0       	ldi	r21, 0x00	; 0
 7aa:	0e 94 5b 04 	call	0x8b6 <__udivmodsi4>
 7ae:	59 01       	movw	r10, r18
 7b0:	6a 01       	movw	r12, r20
 7b2:	c8 01       	movw	r24, r16
 7b4:	b7 01       	movw	r22, r14
 7b6:	2d e1       	ldi	r18, 0x1D	; 29
 7b8:	33 ef       	ldi	r19, 0xF3	; 243
 7ba:	41 e0       	ldi	r20, 0x01	; 1
 7bc:	50 e0       	ldi	r21, 0x00	; 0
 7be:	0e 94 5b 04 	call	0x8b6 <__udivmodsi4>
 7c2:	dc 01       	movw	r26, r24
 7c4:	cb 01       	movw	r24, r22
 7c6:	bc 01       	movw	r22, r24
 7c8:	cd 01       	movw	r24, r26
 7ca:	27 ea       	ldi	r18, 0xA7	; 167
 7cc:	31 e4       	ldi	r19, 0x41	; 65
 7ce:	40 e0       	ldi	r20, 0x00	; 0
 7d0:	50 e0       	ldi	r21, 0x00	; 0
 7d2:	0e 94 3c 04 	call	0x878 <__mulsi3>
 7d6:	7b 01       	movw	r14, r22
 7d8:	8c 01       	movw	r16, r24
 7da:	c6 01       	movw	r24, r12
 7dc:	b5 01       	movw	r22, r10
 7de:	24 e1       	ldi	r18, 0x14	; 20
 7e0:	3b e0       	ldi	r19, 0x0B	; 11
 7e2:	40 e0       	ldi	r20, 0x00	; 0
 7e4:	50 e0       	ldi	r21, 0x00	; 0
 7e6:	0e 94 3c 04 	call	0x878 <__mulsi3>
 7ea:	dc 01       	movw	r26, r24
 7ec:	cb 01       	movw	r24, r22
 7ee:	e8 1a       	sub	r14, r24
 7f0:	f9 0a       	sbc	r15, r25
 7f2:	0a 0b       	sbc	r16, r26
 7f4:	1b 0b       	sbc	r17, r27
 7f6:	1e 14       	cp	r1, r14
 7f8:	1f 04       	cpc	r1, r15
 7fa:	10 06       	cpc	r1, r16
 7fc:	11 06       	cpc	r1, r17
 7fe:	44 f0       	brlt	.+16     	; 0x810 <do_random+0x90>
 800:	8f ef       	ldi	r24, 0xFF	; 255
 802:	9f ef       	ldi	r25, 0xFF	; 255
 804:	af ef       	ldi	r26, 0xFF	; 255
 806:	bf e7       	ldi	r27, 0x7F	; 127
 808:	e8 0e       	add	r14, r24
 80a:	f9 1e       	adc	r15, r25
 80c:	0a 1f       	adc	r16, r26
 80e:	1b 1f       	adc	r17, r27
 810:	e8 82       	st	Y, r14
 812:	f9 82       	std	Y+1, r15	; 0x01
 814:	0a 83       	std	Y+2, r16	; 0x02
 816:	1b 83       	std	Y+3, r17	; 0x03
 818:	8f ef       	ldi	r24, 0xFF	; 255
 81a:	9f ef       	ldi	r25, 0xFF	; 255
 81c:	af ef       	ldi	r26, 0xFF	; 255
 81e:	bf e7       	ldi	r27, 0x7F	; 127
 820:	e8 22       	and	r14, r24
 822:	f9 22       	and	r15, r25
 824:	0a 23       	and	r16, r26
 826:	1b 23       	and	r17, r27
 828:	c8 01       	movw	r24, r16
 82a:	b7 01       	movw	r22, r14
 82c:	df 91       	pop	r29
 82e:	cf 91       	pop	r28
 830:	1f 91       	pop	r17
 832:	0f 91       	pop	r16
 834:	ff 90       	pop	r15
 836:	ef 90       	pop	r14
 838:	df 90       	pop	r13
 83a:	cf 90       	pop	r12
 83c:	bf 90       	pop	r11
 83e:	af 90       	pop	r10
 840:	08 95       	ret

00000842 <random_r>:
 842:	0e 94 c0 03 	call	0x780 <do_random>
 846:	dc 01       	movw	r26, r24
 848:	cb 01       	movw	r24, r22
 84a:	bc 01       	movw	r22, r24
 84c:	cd 01       	movw	r24, r26
 84e:	08 95       	ret

00000850 <random>:
 850:	80 e0       	ldi	r24, 0x00	; 0
 852:	91 e0       	ldi	r25, 0x01	; 1
 854:	0e 94 c0 03 	call	0x780 <do_random>
 858:	dc 01       	movw	r26, r24
 85a:	cb 01       	movw	r24, r22
 85c:	bc 01       	movw	r22, r24
 85e:	cd 01       	movw	r24, r26
 860:	08 95       	ret

00000862 <srandom>:
 862:	dc 01       	movw	r26, r24
 864:	cb 01       	movw	r24, r22
 866:	80 93 00 01 	sts	0x0100, r24
 86a:	90 93 01 01 	sts	0x0101, r25
 86e:	a0 93 02 01 	sts	0x0102, r26
 872:	b0 93 03 01 	sts	0x0103, r27
 876:	08 95       	ret

00000878 <__mulsi3>:
 878:	62 9f       	mul	r22, r18
 87a:	d0 01       	movw	r26, r0
 87c:	73 9f       	mul	r23, r19
 87e:	f0 01       	movw	r30, r0
 880:	82 9f       	mul	r24, r18
 882:	e0 0d       	add	r30, r0
 884:	f1 1d       	adc	r31, r1
 886:	64 9f       	mul	r22, r20
 888:	e0 0d       	add	r30, r0
 88a:	f1 1d       	adc	r31, r1
 88c:	92 9f       	mul	r25, r18
 88e:	f0 0d       	add	r31, r0
 890:	83 9f       	mul	r24, r19
 892:	f0 0d       	add	r31, r0
 894:	74 9f       	mul	r23, r20
 896:	f0 0d       	add	r31, r0
 898:	65 9f       	mul	r22, r21
 89a:	f0 0d       	add	r31, r0
 89c:	99 27       	eor	r25, r25
 89e:	72 9f       	mul	r23, r18
 8a0:	b0 0d       	add	r27, r0
 8a2:	e1 1d       	adc	r30, r1
 8a4:	f9 1f       	adc	r31, r25
 8a6:	63 9f       	mul	r22, r19
 8a8:	b0 0d       	add	r27, r0
 8aa:	e1 1d       	adc	r30, r1
 8ac:	f9 1f       	adc	r31, r25
 8ae:	bd 01       	movw	r22, r26
 8b0:	cf 01       	movw	r24, r30
 8b2:	11 24       	eor	r1, r1
 8b4:	08 95       	ret

000008b6 <__udivmodsi4>:
 8b6:	a1 e2       	ldi	r26, 0x21	; 33
 8b8:	1a 2e       	mov	r1, r26
 8ba:	aa 1b       	sub	r26, r26
 8bc:	bb 1b       	sub	r27, r27
 8be:	fd 01       	movw	r30, r26
 8c0:	0d c0       	rjmp	.+26     	; 0x8dc <__udivmodsi4_ep>

000008c2 <__udivmodsi4_loop>:
 8c2:	aa 1f       	adc	r26, r26
 8c4:	bb 1f       	adc	r27, r27
 8c6:	ee 1f       	adc	r30, r30
 8c8:	ff 1f       	adc	r31, r31
 8ca:	a2 17       	cp	r26, r18
 8cc:	b3 07       	cpc	r27, r19
 8ce:	e4 07       	cpc	r30, r20
 8d0:	f5 07       	cpc	r31, r21
 8d2:	20 f0       	brcs	.+8      	; 0x8dc <__udivmodsi4_ep>
 8d4:	a2 1b       	sub	r26, r18
 8d6:	b3 0b       	sbc	r27, r19
 8d8:	e4 0b       	sbc	r30, r20
 8da:	f5 0b       	sbc	r31, r21

000008dc <__udivmodsi4_ep>:
 8dc:	66 1f       	adc	r22, r22
 8de:	77 1f       	adc	r23, r23
 8e0:	88 1f       	adc	r24, r24
 8e2:	99 1f       	adc	r25, r25
 8e4:	1a 94       	dec	r1
 8e6:	69 f7       	brne	.-38     	; 0x8c2 <__udivmodsi4_loop>
 8e8:	60 95       	com	r22
 8ea:	70 95       	com	r23
 8ec:	80 95       	com	r24
 8ee:	90 95       	com	r25
 8f0:	9b 01       	movw	r18, r22
 8f2:	ac 01       	movw	r20, r24
 8f4:	bd 01       	movw	r22, r26
 8f6:	cf 01       	movw	r24, r30
 8f8:	08 95       	ret
