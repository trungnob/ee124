
drive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000a0c  00000aa0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a0c  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000071  00800104  00800104  00000aa4  2**0
                  ALLOC
  3 .noinit       00000000  00800175  00800175  00000aa4  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000aa4  2**0
                  CONTENTS
  5 .stab         0000036c  00000000  00000000  00000aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000084  00000000  00000000  00000e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000014  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000012f  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000003b3  00000000  00000000  00000fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000000ea  00000000  00000000  0000138a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000008b2  00000000  00000000  00001474  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000001e7  00000000  00000000  00001d26  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  2c:	0c 94 a3 01 	jmp	0x346 <__vector_11>
  30:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  48:	0c 94 7b 01 	jmp	0x2f6 <__vector_18>
  4c:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e0       	ldi	r30, 0x0C	; 12
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 37       	cpi	r26, 0x75	; 117
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0c 94 41 02 	jmp	0x482 <main>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0x0 <__vectors>

000000a2 <initialize>:

// Initialize the Mind Control's ATmega168 microcontroller
void initialize(void)
{
  cli();
  a2:	f8 94       	cli

  // Set I/O pins
  DDRB = 0x10;
  a4:	80 e1       	ldi	r24, 0x10	; 16
  a6:	84 b9       	out	0x04, r24	; 4
  PORTB = 0xCF;
  a8:	8f ec       	ldi	r24, 0xCF	; 207
  aa:	85 b9       	out	0x05, r24	; 5
  DDRC = 0x00;
  ac:	17 b8       	out	0x07, r1	; 7
  PORTC = 0xFF;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	88 b9       	out	0x08, r24	; 8
  DDRD = 0xE6;
  b2:	86 ee       	ldi	r24, 0xE6	; 230
  b4:	8a b9       	out	0x0a, r24	; 10
  PORTD = 0x7D;
  b6:	8d e7       	ldi	r24, 0x7D	; 125
  b8:	8b b9       	out	0x0b, r24	; 11

  // Set up timer 1 to generate an interrupt every 1 ms
  TCCR1A = 0x00;
  ba:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = (_BV(WGM12) | _BV(CS12));
  be:	8c e0       	ldi	r24, 0x0C	; 12
  c0:	80 93 81 00 	sts	0x0081, r24
  OCR1A = 71;
  c4:	87 e4       	ldi	r24, 0x47	; 71
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	90 93 89 00 	sts	0x0089, r25
  cc:	80 93 88 00 	sts	0x0088, r24
  TIMSK1 = _BV(OCIE1A);
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	80 93 6f 00 	sts	0x006F, r24

  // Set up the serial port with rx interrupt
  UBRR0 = 19;
  d6:	83 e1       	ldi	r24, 0x13	; 19
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	90 93 c5 00 	sts	0x00C5, r25
  de:	80 93 c4 00 	sts	0x00C4, r24
  UCSR0B = (_BV(RXCIE0) | _BV(TXEN0) | _BV(RXEN0));
  e2:	88 e9       	ldi	r24, 0x98	; 152
  e4:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = (_BV(UCSZ00) | _BV(UCSZ01));
  e8:	86 e0       	ldi	r24, 0x06	; 6
  ea:	80 93 c2 00 	sts	0x00C2, r24

  // Turn on interrupts
  sei();
  ee:	78 94       	sei
  f0:	08 95       	ret

000000f2 <byteTx>:
  f2:	98 2f       	mov	r25, r24
  f4:	80 91 c0 00 	lds	r24, 0x00C0
  f8:	85 ff       	sbrs	r24, 5
  fa:	fc cf       	rjmp	.-8      	; 0xf4 <byteTx+0x2>
  fc:	90 93 c6 00 	sts	0x00C6, r25
 100:	08 95       	ret

00000102 <defineSongs>:
}




void powerOnRobot(void)
{
  // If Create's power is off, turn it on
  if(!RobotIsOn)
  {
      while(!RobotIsOn)
      {
          RobotPwrToggleLow;
          delayMs(500);  // Delay in this state
          RobotPwrToggleHigh;  // Low to high transition to toggle power
          delayMs(100);  // Delay in this state
          RobotPwrToggleLow;
      }
      delayMs(3500);  // Delay for startup
  }
}




// Switch the baud rate on both Create and module
void baud(uint8_t baud_code)
{
  if(baud_code <= 11)
  {
    byteTx(CmdBaud);
    UCSR0A |= _BV(TXC0);
    byteTx(baud_code);
    // Wait until transmit is complete
    while(!(UCSR0A & _BV(TXC0))) ;

    cli();

    // Switch the baud rate register
    if(baud_code == Baud115200)
      UBRR0 = Ubrr115200;
    else if(baud_code == Baud57600)
      UBRR0 = Ubrr57600;
    else if(baud_code == Baud38400)
      UBRR0 = Ubrr38400;
    else if(baud_code == Baud28800)
      UBRR0 = Ubrr28800;
    else if(baud_code == Baud19200)
      UBRR0 = Ubrr19200;
    else if(baud_code == Baud14400)
      UBRR0 = Ubrr14400;
    else if(baud_code == Baud9600)
      UBRR0 = Ubrr9600;
    else if(baud_code == Baud4800)
      UBRR0 = Ubrr4800;
    else if(baud_code == Baud2400)
      UBRR0 = Ubrr2400;
    else if(baud_code == Baud1200)
      UBRR0 = Ubrr1200;
    else if(baud_code == Baud600)
      UBRR0 = Ubrr600;
    else if(baud_code == Baud300)
      UBRR0 = Ubrr300;

    sei();

    delayMs(100);
  }
}




// Send Create drive commands in terms of velocity and radius
void drive(int16_t velocity, int16_t radius)
{
  byteTx(CmdDrive);
  byteTx((uint8_t)((velocity >> 8) & 0x00FF));
  byteTx((uint8_t)(velocity & 0x00FF));
  byteTx((uint8_t)((radius >> 8) & 0x00FF));
  byteTx((uint8_t)(radius & 0x00FF));
}




// Return an angle value in the range 53 to 180 (degrees)
uint16_t randomAngle(void)
{
    return (53 + ((uint16_t)(random() & 0xFF) >> 1));
}



// Define songs to be played later
void defineSongs(void)
{
  // Reset song
  byteTx(CmdSong);
 102:	8c e8       	ldi	r24, 0x8C	; 140
 104:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(RESET_SONG);
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(4);
 10e:	84 e0       	ldi	r24, 0x04	; 4
 110:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(60);
 114:	8c e3       	ldi	r24, 0x3C	; 60
 116:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(6);
 11a:	86 e0       	ldi	r24, 0x06	; 6
 11c:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(72);
 120:	88 e4       	ldi	r24, 0x48	; 72
 122:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(6);
 126:	86 e0       	ldi	r24, 0x06	; 6
 128:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(84);
 12c:	84 e5       	ldi	r24, 0x54	; 84
 12e:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(6);
 132:	86 e0       	ldi	r24, 0x06	; 6
 134:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(96);
 138:	80 e6       	ldi	r24, 0x60	; 96
 13a:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(6);
 13e:	86 e0       	ldi	r24, 0x06	; 6
 140:	0e 94 79 00 	call	0xf2 <byteTx>

  // Start song
  byteTx(CmdSong);
 144:	8c e8       	ldi	r24, 0x8C	; 140
 146:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(START_SONG);
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(6);
 150:	86 e0       	ldi	r24, 0x06	; 6
 152:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(69);
 156:	85 e4       	ldi	r24, 0x45	; 69
 158:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(18);
 15c:	82 e1       	ldi	r24, 0x12	; 18
 15e:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(72);
 162:	88 e4       	ldi	r24, 0x48	; 72
 164:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(12);
 168:	8c e0       	ldi	r24, 0x0C	; 12
 16a:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(74);
 16e:	8a e4       	ldi	r24, 0x4A	; 74
 170:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(12);
 174:	8c e0       	ldi	r24, 0x0C	; 12
 176:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(72);
 17a:	88 e4       	ldi	r24, 0x48	; 72
 17c:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(12);
 180:	8c e0       	ldi	r24, 0x0C	; 12
 182:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(69);
 186:	85 e4       	ldi	r24, 0x45	; 69
 188:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(12);
 18c:	8c e0       	ldi	r24, 0x0C	; 12
 18e:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(77);
 192:	8d e4       	ldi	r24, 0x4D	; 77
 194:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(24);
 198:	88 e1       	ldi	r24, 0x18	; 24
 19a:	0e 94 79 00 	call	0xf2 <byteTx>

  // Bump song
  byteTx(CmdSong);
 19e:	8c e8       	ldi	r24, 0x8C	; 140
 1a0:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(BUMP_SONG);
 1a4:	82 e0       	ldi	r24, 0x02	; 2
 1a6:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(2);
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(74);
 1b0:	8a e4       	ldi	r24, 0x4A	; 74
 1b2:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(12);
 1b6:	8c e0       	ldi	r24, 0x0C	; 12
 1b8:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(59);
 1bc:	8b e3       	ldi	r24, 0x3B	; 59
 1be:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(24);
 1c2:	88 e1       	ldi	r24, 0x18	; 24
 1c4:	0e 94 79 00 	call	0xf2 <byteTx>

  // End song
  byteTx(CmdSong);
 1c8:	8c e8       	ldi	r24, 0x8C	; 140
 1ca:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(END_SONG);
 1ce:	83 e0       	ldi	r24, 0x03	; 3
 1d0:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(5);
 1d4:	85 e0       	ldi	r24, 0x05	; 5
 1d6:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(77);
 1da:	8d e4       	ldi	r24, 0x4D	; 77
 1dc:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(18);
 1e0:	82 e1       	ldi	r24, 0x12	; 18
 1e2:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(74);
 1e6:	8a e4       	ldi	r24, 0x4A	; 74
 1e8:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(12);
 1ec:	8c e0       	ldi	r24, 0x0C	; 12
 1ee:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(72);
 1f2:	88 e4       	ldi	r24, 0x48	; 72
 1f4:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(12);
 1f8:	8c e0       	ldi	r24, 0x0C	; 12
 1fa:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(69);
 1fe:	85 e4       	ldi	r24, 0x45	; 69
 200:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(12);
 204:	8c e0       	ldi	r24, 0x0C	; 12
 206:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(65);
 20a:	81 e4       	ldi	r24, 0x41	; 65
 20c:	0e 94 79 00 	call	0xf2 <byteTx>
  byteTx(24);
 210:	88 e1       	ldi	r24, 0x18	; 24
 212:	0e 94 79 00 	call	0xf2 <byteTx>
 216:	08 95       	ret

00000218 <drive>:
 218:	ef 92       	push	r14
 21a:	ff 92       	push	r15
 21c:	0f 93       	push	r16
 21e:	1f 93       	push	r17
 220:	8c 01       	movw	r16, r24
 222:	7b 01       	movw	r14, r22
 224:	89 e8       	ldi	r24, 0x89	; 137
 226:	0e 94 79 00 	call	0xf2 <byteTx>
 22a:	81 2f       	mov	r24, r17
 22c:	99 27       	eor	r25, r25
 22e:	87 fd       	sbrc	r24, 7
 230:	9a 95       	dec	r25
 232:	0e 94 79 00 	call	0xf2 <byteTx>
 236:	80 2f       	mov	r24, r16
 238:	0e 94 79 00 	call	0xf2 <byteTx>
 23c:	8f 2d       	mov	r24, r15
 23e:	99 27       	eor	r25, r25
 240:	87 fd       	sbrc	r24, 7
 242:	9a 95       	dec	r25
 244:	0e 94 79 00 	call	0xf2 <byteTx>
 248:	8e 2d       	mov	r24, r14
 24a:	0e 94 79 00 	call	0xf2 <byteTx>
 24e:	1f 91       	pop	r17
 250:	0f 91       	pop	r16
 252:	ff 90       	pop	r15
 254:	ef 90       	pop	r14
 256:	08 95       	ret

00000258 <delayAndUpdateSensors>:
 258:	21 e0       	ldi	r18, 0x01	; 1
 25a:	20 93 0a 01 	sts	0x010A, r18
 25e:	90 93 0c 01 	sts	0x010C, r25
 262:	80 93 0b 01 	sts	0x010B, r24
 266:	80 91 0a 01 	lds	r24, 0x010A
 26a:	88 23       	and	r24, r24
 26c:	09 f4       	brne	.+2      	; 0x270 <delayAndUpdateSensors+0x18>
 26e:	42 c0       	rjmp	.+132    	; 0x2f4 <delayAndUpdateSensors+0x9c>
 270:	80 91 09 01 	lds	r24, 0x0109
 274:	88 23       	and	r24, r24
 276:	b9 f7       	brne	.-18     	; 0x266 <delayAndUpdateSensors+0xe>
 278:	ad e0       	ldi	r26, 0x0D	; 13
 27a:	b1 e0       	ldi	r27, 0x01	; 1
 27c:	e1 e4       	ldi	r30, 0x41	; 65
 27e:	f1 e0       	ldi	r31, 0x01	; 1
 280:	93 e3       	ldi	r25, 0x33	; 51
 282:	8d 91       	ld	r24, X+
 284:	81 93       	st	Z+, r24
 286:	91 50       	subi	r25, 0x01	; 1
 288:	97 ff       	sbrs	r25, 7
 28a:	fb cf       	rjmp	.-10     	; 0x282 <delayAndUpdateSensors+0x2a>
 28c:	80 91 4d 01 	lds	r24, 0x014D
 290:	99 27       	eor	r25, r25
 292:	38 2f       	mov	r19, r24
 294:	22 27       	eor	r18, r18
 296:	80 91 4e 01 	lds	r24, 0x014E
 29a:	99 27       	eor	r25, r25
 29c:	28 2b       	or	r18, r24
 29e:	39 2b       	or	r19, r25
 2a0:	80 91 06 01 	lds	r24, 0x0106
 2a4:	90 91 07 01 	lds	r25, 0x0107
 2a8:	82 0f       	add	r24, r18
 2aa:	93 1f       	adc	r25, r19
 2ac:	90 93 07 01 	sts	0x0107, r25
 2b0:	80 93 06 01 	sts	0x0106, r24
 2b4:	80 91 4f 01 	lds	r24, 0x014F
 2b8:	99 27       	eor	r25, r25
 2ba:	38 2f       	mov	r19, r24
 2bc:	22 27       	eor	r18, r18
 2be:	80 91 50 01 	lds	r24, 0x0150
 2c2:	99 27       	eor	r25, r25
 2c4:	28 2b       	or	r18, r24
 2c6:	39 2b       	or	r19, r25
 2c8:	80 91 04 01 	lds	r24, 0x0104
 2cc:	90 91 05 01 	lds	r25, 0x0105
 2d0:	82 0f       	add	r24, r18
 2d2:	93 1f       	adc	r25, r19
 2d4:	90 93 05 01 	sts	0x0105, r25
 2d8:	80 93 04 01 	sts	0x0104, r24
 2dc:	8e e8       	ldi	r24, 0x8E	; 142
 2de:	0e 94 79 00 	call	0xf2 <byteTx>
 2e2:	86 e0       	ldi	r24, 0x06	; 6
 2e4:	0e 94 79 00 	call	0xf2 <byteTx>
 2e8:	10 92 08 01 	sts	0x0108, r1
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	80 93 09 01 	sts	0x0109, r24
 2f2:	b9 cf       	rjmp	.-142    	; 0x266 <delayAndUpdateSensors+0xe>
 2f4:	08 95       	ret

000002f6 <__vector_18>:
 2f6:	1f 92       	push	r1
 2f8:	0f 92       	push	r0
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	0f 92       	push	r0
 2fe:	11 24       	eor	r1, r1
 300:	8f 93       	push	r24
 302:	9f 93       	push	r25
 304:	ef 93       	push	r30
 306:	ff 93       	push	r31
 308:	90 91 c6 00 	lds	r25, 0x00C6
 30c:	80 91 09 01 	lds	r24, 0x0109
 310:	88 23       	and	r24, r24
 312:	81 f0       	breq	.+32     	; 0x334 <__vector_18+0x3e>
 314:	80 91 08 01 	lds	r24, 0x0108
 318:	e8 2f       	mov	r30, r24
 31a:	ff 27       	eor	r31, r31
 31c:	e3 5f       	subi	r30, 0xF3	; 243
 31e:	fe 4f       	sbci	r31, 0xFE	; 254
 320:	90 83       	st	Z, r25
 322:	8f 5f       	subi	r24, 0xFF	; 255
 324:	80 93 08 01 	sts	0x0108, r24
 328:	80 91 08 01 	lds	r24, 0x0108
 32c:	84 33       	cpi	r24, 0x34	; 52
 32e:	10 f0       	brcs	.+4      	; 0x334 <__vector_18+0x3e>
 330:	10 92 09 01 	sts	0x0109, r1
 334:	ff 91       	pop	r31
 336:	ef 91       	pop	r30
 338:	9f 91       	pop	r25
 33a:	8f 91       	pop	r24
 33c:	0f 90       	pop	r0
 33e:	0f be       	out	0x3f, r0	; 63
 340:	0f 90       	pop	r0
 342:	1f 90       	pop	r1
 344:	18 95       	reti

00000346 <__vector_11>:
 346:	1f 92       	push	r1
 348:	0f 92       	push	r0
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	0f 92       	push	r0
 34e:	11 24       	eor	r1, r1
 350:	8f 93       	push	r24
 352:	9f 93       	push	r25
 354:	80 91 0b 01 	lds	r24, 0x010B
 358:	90 91 0c 01 	lds	r25, 0x010C
 35c:	89 2b       	or	r24, r25
 35e:	51 f0       	breq	.+20     	; 0x374 <__vector_11+0x2e>
 360:	80 91 0b 01 	lds	r24, 0x010B
 364:	90 91 0c 01 	lds	r25, 0x010C
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	90 93 0c 01 	sts	0x010C, r25
 36e:	80 93 0b 01 	sts	0x010B, r24
 372:	02 c0       	rjmp	.+4      	; 0x378 <__vector_11+0x32>
 374:	10 92 0a 01 	sts	0x010A, r1
 378:	9f 91       	pop	r25
 37a:	8f 91       	pop	r24
 37c:	0f 90       	pop	r0
 37e:	0f be       	out	0x3f, r0	; 63
 380:	0f 90       	pop	r0
 382:	1f 90       	pop	r1
 384:	18 95       	reti

00000386 <delayMs>:
 386:	9c 01       	movw	r18, r24
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	80 93 0a 01 	sts	0x010A, r24
 38e:	30 93 0c 01 	sts	0x010C, r19
 392:	20 93 0b 01 	sts	0x010B, r18
 396:	80 91 0a 01 	lds	r24, 0x010A
 39a:	88 23       	and	r24, r24
 39c:	e1 f7       	brne	.-8      	; 0x396 <delayMs+0x10>
 39e:	08 95       	ret

000003a0 <baud>:
 3a0:	cf 93       	push	r28
 3a2:	c8 2f       	mov	r28, r24
 3a4:	8c 30       	cpi	r24, 0x0C	; 12
 3a6:	08 f0       	brcs	.+2      	; 0x3aa <baud+0xa>
 3a8:	54 c0       	rjmp	.+168    	; 0x452 <baud+0xb2>
 3aa:	81 e8       	ldi	r24, 0x81	; 129
 3ac:	0e 94 79 00 	call	0xf2 <byteTx>
 3b0:	80 91 c0 00 	lds	r24, 0x00C0
 3b4:	80 64       	ori	r24, 0x40	; 64
 3b6:	80 93 c0 00 	sts	0x00C0, r24
 3ba:	8c 2f       	mov	r24, r28
 3bc:	0e 94 79 00 	call	0xf2 <byteTx>
 3c0:	80 91 c0 00 	lds	r24, 0x00C0
 3c4:	86 ff       	sbrs	r24, 6
 3c6:	fc cf       	rjmp	.-8      	; 0x3c0 <baud+0x20>
 3c8:	f8 94       	cli
 3ca:	cb 30       	cpi	r28, 0x0B	; 11
 3cc:	19 f4       	brne	.+6      	; 0x3d4 <baud+0x34>
 3ce:	89 e0       	ldi	r24, 0x09	; 9
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	36 c0       	rjmp	.+108    	; 0x440 <baud+0xa0>
 3d4:	ca 30       	cpi	r28, 0x0A	; 10
 3d6:	19 f4       	brne	.+6      	; 0x3de <baud+0x3e>
 3d8:	83 e1       	ldi	r24, 0x13	; 19
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	31 c0       	rjmp	.+98     	; 0x440 <baud+0xa0>
 3de:	c9 30       	cpi	r28, 0x09	; 9
 3e0:	19 f4       	brne	.+6      	; 0x3e8 <baud+0x48>
 3e2:	8d e1       	ldi	r24, 0x1D	; 29
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	2c c0       	rjmp	.+88     	; 0x440 <baud+0xa0>
 3e8:	c8 30       	cpi	r28, 0x08	; 8
 3ea:	19 f4       	brne	.+6      	; 0x3f2 <baud+0x52>
 3ec:	87 e2       	ldi	r24, 0x27	; 39
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	27 c0       	rjmp	.+78     	; 0x440 <baud+0xa0>
 3f2:	c7 30       	cpi	r28, 0x07	; 7
 3f4:	19 f4       	brne	.+6      	; 0x3fc <baud+0x5c>
 3f6:	8b e3       	ldi	r24, 0x3B	; 59
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	22 c0       	rjmp	.+68     	; 0x440 <baud+0xa0>
 3fc:	c6 30       	cpi	r28, 0x06	; 6
 3fe:	19 f4       	brne	.+6      	; 0x406 <baud+0x66>
 400:	8f e4       	ldi	r24, 0x4F	; 79
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	1d c0       	rjmp	.+58     	; 0x440 <baud+0xa0>
 406:	c5 30       	cpi	r28, 0x05	; 5
 408:	19 f4       	brne	.+6      	; 0x410 <baud+0x70>
 40a:	87 e7       	ldi	r24, 0x77	; 119
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	18 c0       	rjmp	.+48     	; 0x440 <baud+0xa0>
 410:	c4 30       	cpi	r28, 0x04	; 4
 412:	19 f4       	brne	.+6      	; 0x41a <baud+0x7a>
 414:	8f ee       	ldi	r24, 0xEF	; 239
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	13 c0       	rjmp	.+38     	; 0x440 <baud+0xa0>
 41a:	c3 30       	cpi	r28, 0x03	; 3
 41c:	19 f4       	brne	.+6      	; 0x424 <baud+0x84>
 41e:	8f ed       	ldi	r24, 0xDF	; 223
 420:	91 e0       	ldi	r25, 0x01	; 1
 422:	0e c0       	rjmp	.+28     	; 0x440 <baud+0xa0>
 424:	c2 30       	cpi	r28, 0x02	; 2
 426:	19 f4       	brne	.+6      	; 0x42e <baud+0x8e>
 428:	8f eb       	ldi	r24, 0xBF	; 191
 42a:	93 e0       	ldi	r25, 0x03	; 3
 42c:	09 c0       	rjmp	.+18     	; 0x440 <baud+0xa0>
 42e:	c1 30       	cpi	r28, 0x01	; 1
 430:	19 f4       	brne	.+6      	; 0x438 <baud+0x98>
 432:	8f e7       	ldi	r24, 0x7F	; 127
 434:	97 e0       	ldi	r25, 0x07	; 7
 436:	04 c0       	rjmp	.+8      	; 0x440 <baud+0xa0>
 438:	cc 23       	and	r28, r28
 43a:	31 f4       	brne	.+12     	; 0x448 <baud+0xa8>
 43c:	8f ef       	ldi	r24, 0xFF	; 255
 43e:	9e e0       	ldi	r25, 0x0E	; 14
 440:	90 93 c5 00 	sts	0x00C5, r25
 444:	80 93 c4 00 	sts	0x00C4, r24
 448:	78 94       	sei
 44a:	84 e6       	ldi	r24, 0x64	; 100
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 c3 01 	call	0x386 <delayMs>
 452:	cf 91       	pop	r28
 454:	08 95       	ret

00000456 <powerOnRobot>:
 456:	1d 99       	sbic	0x03, 5	; 3
 458:	13 c0       	rjmp	.+38     	; 0x480 <powerOnRobot+0x2a>
 45a:	1d 99       	sbic	0x03, 5	; 3
 45c:	0d c0       	rjmp	.+26     	; 0x478 <powerOnRobot+0x22>
 45e:	5f 98       	cbi	0x0b, 7	; 11
 460:	84 ef       	ldi	r24, 0xF4	; 244
 462:	91 e0       	ldi	r25, 0x01	; 1
 464:	0e 94 c3 01 	call	0x386 <delayMs>
 468:	5f 9a       	sbi	0x0b, 7	; 11
 46a:	84 e6       	ldi	r24, 0x64	; 100
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 c3 01 	call	0x386 <delayMs>
 472:	5f 98       	cbi	0x0b, 7	; 11
 474:	1d 9b       	sbis	0x03, 5	; 3
 476:	f3 cf       	rjmp	.-26     	; 0x45e <powerOnRobot+0x8>
 478:	8c ea       	ldi	r24, 0xAC	; 172
 47a:	9d e0       	ldi	r25, 0x0D	; 13
 47c:	0e 94 c3 01 	call	0x386 <delayMs>
 480:	08 95       	ret

00000482 <main>:
 482:	cf ef       	ldi	r28, 0xFF	; 255
 484:	d4 e0       	ldi	r29, 0x04	; 4
 486:	de bf       	out	0x3e, r29	; 62
 488:	cd bf       	out	0x3d, r28	; 61
 48a:	33 e6       	ldi	r19, 0x63	; 99
 48c:	c3 2e       	mov	r12, r19
 48e:	00 e0       	ldi	r16, 0x00	; 0
 490:	21 e0       	ldi	r18, 0x01	; 1
 492:	42 2e       	mov	r4, r18
 494:	ee 24       	eor	r14, r14
 496:	ff 24       	eor	r15, r15
 498:	d4 2c       	mov	r13, r4
 49a:	a0 2e       	mov	r10, r16
 49c:	30 2e       	mov	r3, r16
 49e:	54 2c       	mov	r5, r4
 4a0:	b0 2e       	mov	r11, r16
 4a2:	60 2e       	mov	r6, r16
 4a4:	90 2e       	mov	r9, r16
 4a6:	80 2e       	mov	r8, r16
 4a8:	70 2e       	mov	r7, r16
 4aa:	10 2f       	mov	r17, r16
 4ac:	0e 94 51 00 	call	0xa2 <initialize>
 4b0:	8b b1       	in	r24, 0x0b	; 11
 4b2:	80 66       	ori	r24, 0x60	; 96
 4b4:	8b b9       	out	0x0b, r24	; 11
 4b6:	0e 94 2b 02 	call	0x456 <powerOnRobot>
 4ba:	80 e8       	ldi	r24, 0x80	; 128
 4bc:	0e 94 79 00 	call	0xf2 <byteTx>
 4c0:	88 e0       	ldi	r24, 0x08	; 8
 4c2:	0e 94 d0 01 	call	0x3a0 <baud>
 4c6:	0e 94 81 00 	call	0x102 <defineSongs>
 4ca:	82 e8       	ldi	r24, 0x82	; 130
 4cc:	0e 94 79 00 	call	0xf2 <byteTx>
 4d0:	84 e8       	ldi	r24, 0x84	; 132
 4d2:	0e 94 79 00 	call	0xf2 <byteTx>
 4d6:	60 e0       	ldi	r22, 0x00	; 0
 4d8:	70 e8       	ldi	r23, 0x80	; 128
 4da:	c7 01       	movw	r24, r14
 4dc:	0e 94 0c 01 	call	0x218 <drive>
 4e0:	8d e8       	ldi	r24, 0x8D	; 141
 4e2:	0e 94 79 00 	call	0xf2 <byteTx>
 4e6:	80 2f       	mov	r24, r16
 4e8:	0e 94 79 00 	call	0xf2 <byteTx>
 4ec:	8e ee       	ldi	r24, 0xEE	; 238
 4ee:	92 e0       	ldi	r25, 0x02	; 2
 4f0:	0e 94 2c 01 	call	0x258 <delayAndUpdateSensors>
 4f4:	c3 94       	inc	r12
 4f6:	83 e6       	ldi	r24, 0x63	; 99
 4f8:	8c 15       	cp	r24, r12
 4fa:	30 f5       	brcc	.+76     	; 0x548 <__stack+0x49>
 4fc:	cc 24       	eor	r12, r12
 4fe:	8c 2d       	mov	r24, r12
 500:	44 20       	and	r4, r4
 502:	09 f4       	brne	.+2      	; 0x506 <__stack+0x7>
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	48 2e       	mov	r4, r24
 508:	88 23       	and	r24, r24
 50a:	79 f0       	breq	.+30     	; 0x52a <__stack+0x2b>
 50c:	8b e8       	ldi	r24, 0x8B	; 139
 50e:	0e 94 79 00 	call	0xf2 <byteTx>
 512:	8a e0       	ldi	r24, 0x0A	; 10
 514:	0e 94 79 00 	call	0xf2 <byteTx>
 518:	80 e8       	ldi	r24, 0x80	; 128
 51a:	0e 94 79 00 	call	0xf2 <byteTx>
 51e:	8f ef       	ldi	r24, 0xFF	; 255
 520:	0e 94 79 00 	call	0xf2 <byteTx>
 524:	8b b1       	in	r24, 0x0b	; 11
 526:	80 66       	ori	r24, 0x60	; 96
 528:	0e c0       	rjmp	.+28     	; 0x546 <__stack+0x47>
 52a:	8b e8       	ldi	r24, 0x8B	; 139
 52c:	0e 94 79 00 	call	0xf2 <byteTx>
 530:	8c 2d       	mov	r24, r12
 532:	0e 94 79 00 	call	0xf2 <byteTx>
 536:	8c 2d       	mov	r24, r12
 538:	0e 94 79 00 	call	0xf2 <byteTx>
 53c:	8c 2d       	mov	r24, r12
 53e:	0e 94 79 00 	call	0xf2 <byteTx>
 542:	8b b1       	in	r24, 0x0b	; 11
 544:	8f 79       	andi	r24, 0x9F	; 159
 546:	8b b9       	out	0x0b, r24	; 11
 548:	8a e0       	ldi	r24, 0x0A	; 10
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	0e 94 2c 01 	call	0x258 <delayAndUpdateSensors>
 550:	4c 99       	sbic	0x09, 4	; 9
 552:	d0 cf       	rjmp	.-96     	; 0x4f4 <main+0x72>
 554:	8d e8       	ldi	r24, 0x8D	; 141
 556:	0e 94 79 00 	call	0xf2 <byteTx>
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	0e 94 79 00 	call	0xf2 <byteTx>
 560:	8d ef       	ldi	r24, 0xFD	; 253
 562:	9a e0       	ldi	r25, 0x0A	; 10
 564:	61 c1       	rjmp	.+706    	; 0x828 <__stack+0x329>
 566:	aa 20       	and	r10, r10
 568:	79 f1       	breq	.+94     	; 0x5c8 <__stack+0xc9>
 56a:	33 20       	and	r3, r3
 56c:	81 f0       	breq	.+32     	; 0x58e <__stack+0x8f>
 56e:	80 91 06 01 	lds	r24, 0x0106
 572:	90 91 07 01 	lds	r25, 0x0107
 576:	97 ff       	sbrs	r25, 7
 578:	05 c0       	rjmp	.+10     	; 0x584 <__stack+0x85>
 57a:	32 2e       	mov	r3, r18
 57c:	10 92 07 01 	sts	0x0107, r1
 580:	10 92 06 01 	sts	0x0106, r1
 584:	60 e0       	ldi	r22, 0x00	; 0
 586:	70 e8       	ldi	r23, 0x80	; 128
 588:	88 e3       	ldi	r24, 0x38	; 56
 58a:	9f ef       	ldi	r25, 0xFF	; 255
 58c:	dd c0       	rjmp	.+442    	; 0x748 <__stack+0x249>
 58e:	dd 20       	and	r13, r13
 590:	59 f0       	breq	.+22     	; 0x5a8 <__stack+0xa9>
 592:	80 91 04 01 	lds	r24, 0x0104
 596:	90 91 05 01 	lds	r25, 0x0105
 59a:	e8 16       	cp	r14, r24
 59c:	f9 06       	cpc	r15, r25
 59e:	0c f4       	brge	.+2      	; 0x5a2 <__stack+0xa3>
 5a0:	a3 2c       	mov	r10, r3
 5a2:	61 e0       	ldi	r22, 0x01	; 1
 5a4:	70 e0       	ldi	r23, 0x00	; 0
 5a6:	0d c0       	rjmp	.+26     	; 0x5c2 <__stack+0xc3>
 5a8:	80 91 04 01 	lds	r24, 0x0104
 5ac:	90 91 05 01 	lds	r25, 0x0105
 5b0:	90 95       	com	r25
 5b2:	81 95       	neg	r24
 5b4:	9f 4f       	sbci	r25, 0xFF	; 255
 5b6:	e8 16       	cp	r14, r24
 5b8:	f9 06       	cpc	r15, r25
 5ba:	0c f4       	brge	.+2      	; 0x5be <__stack+0xbf>
 5bc:	ad 2c       	mov	r10, r13
 5be:	6f ef       	ldi	r22, 0xFF	; 255
 5c0:	7f ef       	ldi	r23, 0xFF	; 255
 5c2:	88 ec       	ldi	r24, 0xC8	; 200
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	c0 c0       	rjmp	.+384    	; 0x748 <__stack+0x249>
 5c8:	80 91 41 01 	lds	r24, 0x0141
 5cc:	28 2f       	mov	r18, r24
 5ce:	33 27       	eor	r19, r19
 5d0:	23 70       	andi	r18, 0x03	; 3
 5d2:	30 70       	andi	r19, 0x00	; 0
 5d4:	21 15       	cp	r18, r1
 5d6:	31 05       	cpc	r19, r1
 5d8:	09 f4       	brne	.+2      	; 0x5dc <__stack+0xdd>
 5da:	5b c0       	rjmp	.+182    	; 0x692 <__stack+0x193>
 5dc:	91 e0       	ldi	r25, 0x01	; 1
 5de:	d9 2e       	mov	r13, r25
 5e0:	81 e5       	ldi	r24, 0x51	; 81
 5e2:	e8 2e       	mov	r14, r24
 5e4:	f1 2c       	mov	r15, r1
 5e6:	11 23       	and	r17, r17
 5e8:	81 f4       	brne	.+32     	; 0x60a <__stack+0x10b>
 5ea:	6d 2c       	mov	r6, r13
 5ec:	88 20       	and	r8, r8
 5ee:	09 f4       	brne	.+2      	; 0x5f2 <__stack+0xf3>
 5f0:	40 c0       	rjmp	.+128    	; 0x672 <__stack+0x173>
 5f2:	99 20       	and	r9, r9
 5f4:	11 f4       	brne	.+4      	; 0x5fa <__stack+0xfb>
 5f6:	da 2c       	mov	r13, r10
 5f8:	36 c0       	rjmp	.+108    	; 0x666 <__stack+0x167>
 5fa:	77 20       	and	r7, r7
 5fc:	09 f0       	breq	.+2      	; 0x600 <__stack+0x101>
 5fe:	2d c1       	rjmp	.+602    	; 0x85a <__stack+0x35b>
 600:	14 eb       	ldi	r17, 0xB4	; 180
 602:	e1 2e       	mov	r14, r17
 604:	f1 2c       	mov	r15, r1
 606:	1d 2d       	mov	r17, r13
 608:	35 c0       	rjmp	.+106    	; 0x674 <__stack+0x175>
 60a:	12 30       	cpi	r17, 0x02	; 2
 60c:	89 f4       	brne	.+34     	; 0x630 <__stack+0x131>
 60e:	8d 2c       	mov	r8, r13
 610:	66 20       	and	r6, r6
 612:	19 f4       	brne	.+6      	; 0x61a <__stack+0x11b>
 614:	1a 2d       	mov	r17, r10
 616:	da 2c       	mov	r13, r10
 618:	2d c0       	rjmp	.+90     	; 0x674 <__stack+0x175>
 61a:	99 20       	and	r9, r9
 61c:	21 f4       	brne	.+8      	; 0x626 <__stack+0x127>
 61e:	c4 eb       	ldi	r28, 0xB4	; 180
 620:	ec 2e       	mov	r14, r28
 622:	f1 2c       	mov	r15, r1
 624:	20 c0       	rjmp	.+64     	; 0x666 <__stack+0x167>
 626:	77 20       	and	r7, r7
 628:	09 f0       	breq	.+2      	; 0x62c <__stack+0x12d>
 62a:	17 c1       	rjmp	.+558    	; 0x85a <__stack+0x35b>
 62c:	1d 2d       	mov	r17, r13
 62e:	22 c0       	rjmp	.+68     	; 0x674 <__stack+0x175>
 630:	13 30       	cpi	r17, 0x03	; 3
 632:	79 f4       	brne	.+30     	; 0x652 <__stack+0x153>
 634:	9d 2c       	mov	r9, r13
 636:	66 20       	and	r6, r6
 638:	91 f0       	breq	.+36     	; 0x65e <__stack+0x15f>
 63a:	88 20       	and	r8, r8
 63c:	21 f4       	brne	.+8      	; 0x646 <__stack+0x147>
 63e:	b4 eb       	ldi	r27, 0xB4	; 180
 640:	eb 2e       	mov	r14, r27
 642:	f1 2c       	mov	r15, r1
 644:	16 c0       	rjmp	.+44     	; 0x672 <__stack+0x173>
 646:	77 20       	and	r7, r7
 648:	09 f0       	breq	.+2      	; 0x64c <__stack+0x14d>
 64a:	07 c1       	rjmp	.+526    	; 0x85a <__stack+0x35b>
 64c:	da 2c       	mov	r13, r10
 64e:	19 2d       	mov	r17, r9
 650:	11 c0       	rjmp	.+34     	; 0x674 <__stack+0x175>
 652:	7d 2c       	mov	r7, r13
 654:	66 20       	and	r6, r6
 656:	29 f4       	brne	.+10     	; 0x662 <__stack+0x163>
 658:	a4 eb       	ldi	r26, 0xB4	; 180
 65a:	ea 2e       	mov	r14, r26
 65c:	f1 2c       	mov	r15, r1
 65e:	1a 2d       	mov	r17, r10
 660:	09 c0       	rjmp	.+18     	; 0x674 <__stack+0x175>
 662:	99 20       	and	r9, r9
 664:	11 f4       	brne	.+4      	; 0x66a <__stack+0x16b>
 666:	13 e0       	ldi	r17, 0x03	; 3
 668:	05 c0       	rjmp	.+10     	; 0x674 <__stack+0x175>
 66a:	88 20       	and	r8, r8
 66c:	09 f0       	breq	.+2      	; 0x670 <__stack+0x171>
 66e:	f5 c0       	rjmp	.+490    	; 0x85a <__stack+0x35b>
 670:	da 2c       	mov	r13, r10
 672:	12 e0       	ldi	r17, 0x02	; 2
 674:	f1 e0       	ldi	r31, 0x01	; 1
 676:	af 2e       	mov	r10, r31
 678:	3a 2c       	mov	r3, r10
 67a:	10 92 05 01 	sts	0x0105, r1
 67e:	10 92 04 01 	sts	0x0104, r1
 682:	55 24       	eor	r5, r5
 684:	8d e8       	ldi	r24, 0x8D	; 141
 686:	0e 94 79 00 	call	0xf2 <byteTx>
 68a:	82 e0       	ldi	r24, 0x02	; 2
 68c:	0e 94 79 00 	call	0xf2 <byteTx>
 690:	6f c0       	rjmp	.+222    	; 0x770 <__stack+0x271>
 692:	c9 01       	movw	r24, r18
 694:	55 20       	and	r5, r5
 696:	11 f4       	brne	.+4      	; 0x69c <__stack+0x19d>
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	ec 01       	movw	r28, r24
 69e:	c1 70       	andi	r28, 0x01	; 1
 6a0:	d0 70       	andi	r29, 0x00	; 0
 6a2:	80 ff       	sbrs	r24, 0
 6a4:	54 c0       	rjmp	.+168    	; 0x74e <__stack+0x24f>
 6a6:	80 91 06 01 	lds	r24, 0x0106
 6aa:	90 91 07 01 	lds	r25, 0x0107
 6ae:	89 3c       	cpi	r24, 0xC9	; 201
 6b0:	91 05       	cpc	r25, r1
 6b2:	0c f4       	brge	.+2      	; 0x6b6 <__stack+0x1b7>
 6b4:	45 c0       	rjmp	.+138    	; 0x740 <__stack+0x241>
 6b6:	30 93 05 01 	sts	0x0105, r19
 6ba:	20 93 04 01 	sts	0x0104, r18
 6be:	30 93 07 01 	sts	0x0107, r19
 6c2:	20 93 06 01 	sts	0x0106, r18
 6c6:	e1 e5       	ldi	r30, 0x51	; 81
 6c8:	ee 2e       	mov	r14, r30
 6ca:	f1 2c       	mov	r15, r1
 6cc:	11 23       	and	r17, r17
 6ce:	69 f4       	brne	.+26     	; 0x6ea <__stack+0x1eb>
 6d0:	8a 2c       	mov	r8, r10
 6d2:	9a 2c       	mov	r9, r10
 6d4:	1b 14       	cp	r1, r11
 6d6:	24 f4       	brge	.+8      	; 0x6e0 <__stack+0x1e1>
 6d8:	71 e0       	ldi	r23, 0x01	; 1
 6da:	d7 2e       	mov	r13, r23
 6dc:	12 e0       	ldi	r17, 0x02	; 2
 6de:	20 c0       	rjmp	.+64     	; 0x720 <__stack+0x221>
 6e0:	b7 fe       	sbrs	r11, 7
 6e2:	46 c0       	rjmp	.+140    	; 0x770 <__stack+0x271>
 6e4:	da 2c       	mov	r13, r10
 6e6:	13 e0       	ldi	r17, 0x03	; 3
 6e8:	28 c0       	rjmp	.+80     	; 0x73a <__stack+0x23b>
 6ea:	12 30       	cpi	r17, 0x02	; 2
 6ec:	61 f4       	brne	.+24     	; 0x706 <__stack+0x207>
 6ee:	7a 2c       	mov	r7, r10
 6f0:	6a 2c       	mov	r6, r10
 6f2:	ba 94       	dec	r11
 6f4:	1b 14       	cp	r1, r11
 6f6:	e4 f1       	brlt	.+120    	; 0x770 <__stack+0x271>
 6f8:	1a 2d       	mov	r17, r10
 6fa:	da 2c       	mov	r13, r10
 6fc:	bb 20       	and	r11, r11
 6fe:	e9 f4       	brne	.+58     	; 0x73a <__stack+0x23b>
 700:	61 e0       	ldi	r22, 0x01	; 1
 702:	56 2e       	mov	r5, r22
 704:	1a c0       	rjmp	.+52     	; 0x73a <__stack+0x23b>
 706:	13 30       	cpi	r17, 0x03	; 3
 708:	69 f4       	brne	.+26     	; 0x724 <__stack+0x225>
 70a:	7a 2c       	mov	r7, r10
 70c:	6a 2c       	mov	r6, r10
 70e:	b3 94       	inc	r11
 710:	b7 fc       	sbrc	r11, 7
 712:	2e c0       	rjmp	.+92     	; 0x770 <__stack+0x271>
 714:	51 e0       	ldi	r21, 0x01	; 1
 716:	d5 2e       	mov	r13, r21
 718:	1a 2d       	mov	r17, r10
 71a:	bb 20       	and	r11, r11
 71c:	09 f4       	brne	.+2      	; 0x720 <__stack+0x221>
 71e:	5d 2c       	mov	r5, r13
 720:	ad 2c       	mov	r10, r13
 722:	26 c0       	rjmp	.+76     	; 0x770 <__stack+0x271>
 724:	11 30       	cpi	r17, 0x01	; 1
 726:	21 f5       	brne	.+72     	; 0x770 <__stack+0x271>
 728:	88 20       	and	r8, r8
 72a:	19 f0       	breq	.+6      	; 0x732 <__stack+0x233>
 72c:	d1 2e       	mov	r13, r17
 72e:	13 e0       	ldi	r17, 0x03	; 3
 730:	02 c0       	rjmp	.+4      	; 0x736 <__stack+0x237>
 732:	da 2c       	mov	r13, r10
 734:	12 e0       	ldi	r17, 0x02	; 2
 736:	99 24       	eor	r9, r9
 738:	89 2c       	mov	r8, r9
 73a:	41 e0       	ldi	r20, 0x01	; 1
 73c:	a4 2e       	mov	r10, r20
 73e:	18 c0       	rjmp	.+48     	; 0x770 <__stack+0x271>
 740:	60 e0       	ldi	r22, 0x00	; 0
 742:	70 e8       	ldi	r23, 0x80	; 128
 744:	8c e2       	ldi	r24, 0x2C	; 44
 746:	91 e0       	ldi	r25, 0x01	; 1
 748:	0e 94 0c 01 	call	0x218 <drive>
 74c:	11 c0       	rjmp	.+34     	; 0x770 <__stack+0x271>
 74e:	60 e0       	ldi	r22, 0x00	; 0
 750:	70 e8       	ldi	r23, 0x80	; 128
 752:	8c e2       	ldi	r24, 0x2C	; 44
 754:	91 e0       	ldi	r25, 0x01	; 1
 756:	0e 94 0c 01 	call	0x218 <drive>
 75a:	80 91 06 01 	lds	r24, 0x0106
 75e:	90 91 07 01 	lds	r25, 0x0107
 762:	89 3c       	cpi	r24, 0xC9	; 201
 764:	91 05       	cpc	r25, r1
 766:	24 f0       	brlt	.+8      	; 0x770 <__stack+0x271>
 768:	d0 93 07 01 	sts	0x0107, r29
 76c:	c0 93 06 01 	sts	0x0106, r28
 770:	c3 94       	inc	r12
 772:	89 e0       	ldi	r24, 0x09	; 9
 774:	8c 15       	cp	r24, r12
 776:	08 f0       	brcs	.+2      	; 0x77a <__stack+0x27b>
 778:	55 c0       	rjmp	.+170    	; 0x824 <__stack+0x325>
 77a:	cc 24       	eor	r12, r12
 77c:	aa 20       	and	r10, r10
 77e:	31 f0       	breq	.+12     	; 0x78c <__stack+0x28d>
 780:	00 23       	and	r16, r16
 782:	11 f4       	brne	.+4      	; 0x788 <__stack+0x289>
 784:	04 e0       	ldi	r16, 0x04	; 4
 786:	40 c0       	rjmp	.+128    	; 0x808 <__stack+0x309>
 788:	01 50       	subi	r16, 0x01	; 1
 78a:	05 c0       	rjmp	.+10     	; 0x796 <__stack+0x297>
 78c:	04 30       	cpi	r16, 0x04	; 4
 78e:	11 f4       	brne	.+4      	; 0x794 <__stack+0x295>
 790:	0a 2d       	mov	r16, r10
 792:	03 c0       	rjmp	.+6      	; 0x79a <__stack+0x29b>
 794:	0f 5f       	subi	r16, 0xFF	; 255
 796:	00 23       	and	r16, r16
 798:	59 f4       	brne	.+22     	; 0x7b0 <__stack+0x2b1>
 79a:	8b e8       	ldi	r24, 0x8B	; 139
 79c:	0e 94 79 00 	call	0xf2 <byteTx>
 7a0:	80 2f       	mov	r24, r16
 7a2:	0e 94 79 00 	call	0xf2 <byteTx>
 7a6:	80 e8       	ldi	r24, 0x80	; 128
 7a8:	0e 94 79 00 	call	0xf2 <byteTx>
 7ac:	8f ef       	ldi	r24, 0xFF	; 255
 7ae:	13 c0       	rjmp	.+38     	; 0x7d6 <__stack+0x2d7>
 7b0:	01 30       	cpi	r16, 0x01	; 1
 7b2:	29 f4       	brne	.+10     	; 0x7be <__stack+0x2bf>
 7b4:	8b e8       	ldi	r24, 0x8B	; 139
 7b6:	0e 94 79 00 	call	0xf2 <byteTx>
 7ba:	82 e0       	ldi	r24, 0x02	; 2
 7bc:	06 c0       	rjmp	.+12     	; 0x7ca <__stack+0x2cb>
 7be:	02 30       	cpi	r16, 0x02	; 2
 7c0:	81 f4       	brne	.+32     	; 0x7e2 <__stack+0x2e3>
 7c2:	8b e8       	ldi	r24, 0x8B	; 139
 7c4:	0e 94 79 00 	call	0xf2 <byteTx>
 7c8:	88 e0       	ldi	r24, 0x08	; 8
 7ca:	0e 94 79 00 	call	0xf2 <byteTx>
 7ce:	80 e0       	ldi	r24, 0x00	; 0
 7d0:	0e 94 79 00 	call	0xf2 <byteTx>
 7d4:	80 e0       	ldi	r24, 0x00	; 0
 7d6:	0e 94 79 00 	call	0xf2 <byteTx>
 7da:	8b b1       	in	r24, 0x0b	; 11
 7dc:	80 66       	ori	r24, 0x60	; 96
 7de:	8b b9       	out	0x0b, r24	; 11
 7e0:	21 c0       	rjmp	.+66     	; 0x824 <__stack+0x325>
 7e2:	03 30       	cpi	r16, 0x03	; 3
 7e4:	79 f4       	brne	.+30     	; 0x804 <__stack+0x305>
 7e6:	8b e8       	ldi	r24, 0x8B	; 139
 7e8:	0e 94 79 00 	call	0xf2 <byteTx>
 7ec:	80 e0       	ldi	r24, 0x00	; 0
 7ee:	0e 94 79 00 	call	0xf2 <byteTx>
 7f2:	80 e0       	ldi	r24, 0x00	; 0
 7f4:	0e 94 79 00 	call	0xf2 <byteTx>
 7f8:	80 e0       	ldi	r24, 0x00	; 0
 7fa:	0e 94 79 00 	call	0xf2 <byteTx>
 7fe:	5e 98       	cbi	0x0b, 6	; 11
 800:	5d 9a       	sbi	0x0b, 5	; 11
 802:	10 c0       	rjmp	.+32     	; 0x824 <__stack+0x325>
 804:	04 30       	cpi	r16, 0x04	; 4
 806:	71 f4       	brne	.+28     	; 0x824 <__stack+0x325>
 808:	8b e8       	ldi	r24, 0x8B	; 139
 80a:	0e 94 79 00 	call	0xf2 <byteTx>
 80e:	80 e0       	ldi	r24, 0x00	; 0
 810:	0e 94 79 00 	call	0xf2 <byteTx>
 814:	80 e0       	ldi	r24, 0x00	; 0
 816:	0e 94 79 00 	call	0xf2 <byteTx>
 81a:	80 e0       	ldi	r24, 0x00	; 0
 81c:	0e 94 79 00 	call	0xf2 <byteTx>
 820:	5d 98       	cbi	0x0b, 5	; 11
 822:	5e 9a       	sbi	0x0b, 6	; 11
 824:	84 e1       	ldi	r24, 0x14	; 20
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	0e 94 2c 01 	call	0x258 <delayAndUpdateSensors>
 82c:	4c 9b       	sbis	0x09, 4	; 9
 82e:	15 c0       	rjmp	.+42     	; 0x85a <__stack+0x35b>
 830:	80 91 43 01 	lds	r24, 0x0143
 834:	88 23       	and	r24, r24
 836:	89 f4       	brne	.+34     	; 0x85a <__stack+0x35b>
 838:	80 91 44 01 	lds	r24, 0x0144
 83c:	88 23       	and	r24, r24
 83e:	69 f4       	brne	.+26     	; 0x85a <__stack+0x35b>
 840:	80 91 45 01 	lds	r24, 0x0145
 844:	88 23       	and	r24, r24
 846:	49 f4       	brne	.+18     	; 0x85a <__stack+0x35b>
 848:	80 91 46 01 	lds	r24, 0x0146
 84c:	88 23       	and	r24, r24
 84e:	29 f4       	brne	.+10     	; 0x85a <__stack+0x35b>
 850:	20 91 68 01 	lds	r18, 0x0168
 854:	22 23       	and	r18, r18
 856:	09 f4       	brne	.+2      	; 0x85a <__stack+0x35b>
 858:	86 ce       	rjmp	.-756    	; 0x566 <__stack+0x67>
 85a:	60 e0       	ldi	r22, 0x00	; 0
 85c:	70 e8       	ldi	r23, 0x80	; 128
 85e:	80 e0       	ldi	r24, 0x00	; 0
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	0e 94 0c 01 	call	0x218 <drive>
 866:	84 ef       	ldi	r24, 0xF4	; 244
 868:	91 e0       	ldi	r25, 0x01	; 1
 86a:	0e 94 2c 01 	call	0x258 <delayAndUpdateSensors>
 86e:	8d e8       	ldi	r24, 0x8D	; 141
 870:	0e 94 79 00 	call	0xf2 <byteTx>
 874:	83 e0       	ldi	r24, 0x03	; 3
 876:	0e 94 79 00 	call	0xf2 <byteTx>
 87a:	86 e8       	ldi	r24, 0x86	; 134
 87c:	99 e0       	ldi	r25, 0x09	; 9
 87e:	38 ce       	rjmp	.-912    	; 0x4f0 <main+0x6e>

00000880 <randomAngle>:
 880:	0e 94 b1 04 	call	0x962 <random>
 884:	dc 01       	movw	r26, r24
 886:	cb 01       	movw	r24, r22
 888:	90 70       	andi	r25, 0x00	; 0
 88a:	96 95       	lsr	r25
 88c:	87 95       	ror	r24
 88e:	c5 96       	adiw	r24, 0x35	; 53
 890:	08 95       	ret

00000892 <do_random>:
 892:	af 92       	push	r10
 894:	bf 92       	push	r11
 896:	cf 92       	push	r12
 898:	df 92       	push	r13
 89a:	ef 92       	push	r14
 89c:	ff 92       	push	r15
 89e:	0f 93       	push	r16
 8a0:	1f 93       	push	r17
 8a2:	cf 93       	push	r28
 8a4:	df 93       	push	r29
 8a6:	ec 01       	movw	r28, r24
 8a8:	e8 80       	ld	r14, Y
 8aa:	f9 80       	ldd	r15, Y+1	; 0x01
 8ac:	0a 81       	ldd	r16, Y+2	; 0x02
 8ae:	1b 81       	ldd	r17, Y+3	; 0x03
 8b0:	c8 01       	movw	r24, r16
 8b2:	b7 01       	movw	r22, r14
 8b4:	2d e1       	ldi	r18, 0x1D	; 29
 8b6:	33 ef       	ldi	r19, 0xF3	; 243
 8b8:	41 e0       	ldi	r20, 0x01	; 1
 8ba:	50 e0       	ldi	r21, 0x00	; 0
 8bc:	0e 94 e4 04 	call	0x9c8 <__udivmodsi4>
 8c0:	59 01       	movw	r10, r18
 8c2:	6a 01       	movw	r12, r20
 8c4:	c8 01       	movw	r24, r16
 8c6:	b7 01       	movw	r22, r14
 8c8:	2d e1       	ldi	r18, 0x1D	; 29
 8ca:	33 ef       	ldi	r19, 0xF3	; 243
 8cc:	41 e0       	ldi	r20, 0x01	; 1
 8ce:	50 e0       	ldi	r21, 0x00	; 0
 8d0:	0e 94 e4 04 	call	0x9c8 <__udivmodsi4>
 8d4:	dc 01       	movw	r26, r24
 8d6:	cb 01       	movw	r24, r22
 8d8:	bc 01       	movw	r22, r24
 8da:	cd 01       	movw	r24, r26
 8dc:	27 ea       	ldi	r18, 0xA7	; 167
 8de:	31 e4       	ldi	r19, 0x41	; 65
 8e0:	40 e0       	ldi	r20, 0x00	; 0
 8e2:	50 e0       	ldi	r21, 0x00	; 0
 8e4:	0e 94 c5 04 	call	0x98a <__mulsi3>
 8e8:	7b 01       	movw	r14, r22
 8ea:	8c 01       	movw	r16, r24
 8ec:	c6 01       	movw	r24, r12
 8ee:	b5 01       	movw	r22, r10
 8f0:	24 e1       	ldi	r18, 0x14	; 20
 8f2:	3b e0       	ldi	r19, 0x0B	; 11
 8f4:	40 e0       	ldi	r20, 0x00	; 0
 8f6:	50 e0       	ldi	r21, 0x00	; 0
 8f8:	0e 94 c5 04 	call	0x98a <__mulsi3>
 8fc:	dc 01       	movw	r26, r24
 8fe:	cb 01       	movw	r24, r22
 900:	e8 1a       	sub	r14, r24
 902:	f9 0a       	sbc	r15, r25
 904:	0a 0b       	sbc	r16, r26
 906:	1b 0b       	sbc	r17, r27
 908:	1e 14       	cp	r1, r14
 90a:	1f 04       	cpc	r1, r15
 90c:	10 06       	cpc	r1, r16
 90e:	11 06       	cpc	r1, r17
 910:	44 f0       	brlt	.+16     	; 0x922 <do_random+0x90>
 912:	8f ef       	ldi	r24, 0xFF	; 255
 914:	9f ef       	ldi	r25, 0xFF	; 255
 916:	af ef       	ldi	r26, 0xFF	; 255
 918:	bf e7       	ldi	r27, 0x7F	; 127
 91a:	e8 0e       	add	r14, r24
 91c:	f9 1e       	adc	r15, r25
 91e:	0a 1f       	adc	r16, r26
 920:	1b 1f       	adc	r17, r27
 922:	e8 82       	st	Y, r14
 924:	f9 82       	std	Y+1, r15	; 0x01
 926:	0a 83       	std	Y+2, r16	; 0x02
 928:	1b 83       	std	Y+3, r17	; 0x03
 92a:	8f ef       	ldi	r24, 0xFF	; 255
 92c:	9f ef       	ldi	r25, 0xFF	; 255
 92e:	af ef       	ldi	r26, 0xFF	; 255
 930:	bf e7       	ldi	r27, 0x7F	; 127
 932:	e8 22       	and	r14, r24
 934:	f9 22       	and	r15, r25
 936:	0a 23       	and	r16, r26
 938:	1b 23       	and	r17, r27
 93a:	c8 01       	movw	r24, r16
 93c:	b7 01       	movw	r22, r14
 93e:	df 91       	pop	r29
 940:	cf 91       	pop	r28
 942:	1f 91       	pop	r17
 944:	0f 91       	pop	r16
 946:	ff 90       	pop	r15
 948:	ef 90       	pop	r14
 94a:	df 90       	pop	r13
 94c:	cf 90       	pop	r12
 94e:	bf 90       	pop	r11
 950:	af 90       	pop	r10
 952:	08 95       	ret

00000954 <random_r>:
 954:	0e 94 49 04 	call	0x892 <do_random>
 958:	dc 01       	movw	r26, r24
 95a:	cb 01       	movw	r24, r22
 95c:	bc 01       	movw	r22, r24
 95e:	cd 01       	movw	r24, r26
 960:	08 95       	ret

00000962 <random>:
 962:	80 e0       	ldi	r24, 0x00	; 0
 964:	91 e0       	ldi	r25, 0x01	; 1
 966:	0e 94 49 04 	call	0x892 <do_random>
 96a:	dc 01       	movw	r26, r24
 96c:	cb 01       	movw	r24, r22
 96e:	bc 01       	movw	r22, r24
 970:	cd 01       	movw	r24, r26
 972:	08 95       	ret

00000974 <srandom>:
 974:	dc 01       	movw	r26, r24
 976:	cb 01       	movw	r24, r22
 978:	80 93 00 01 	sts	0x0100, r24
 97c:	90 93 01 01 	sts	0x0101, r25
 980:	a0 93 02 01 	sts	0x0102, r26
 984:	b0 93 03 01 	sts	0x0103, r27
 988:	08 95       	ret

0000098a <__mulsi3>:
 98a:	62 9f       	mul	r22, r18
 98c:	d0 01       	movw	r26, r0
 98e:	73 9f       	mul	r23, r19
 990:	f0 01       	movw	r30, r0
 992:	82 9f       	mul	r24, r18
 994:	e0 0d       	add	r30, r0
 996:	f1 1d       	adc	r31, r1
 998:	64 9f       	mul	r22, r20
 99a:	e0 0d       	add	r30, r0
 99c:	f1 1d       	adc	r31, r1
 99e:	92 9f       	mul	r25, r18
 9a0:	f0 0d       	add	r31, r0
 9a2:	83 9f       	mul	r24, r19
 9a4:	f0 0d       	add	r31, r0
 9a6:	74 9f       	mul	r23, r20
 9a8:	f0 0d       	add	r31, r0
 9aa:	65 9f       	mul	r22, r21
 9ac:	f0 0d       	add	r31, r0
 9ae:	99 27       	eor	r25, r25
 9b0:	72 9f       	mul	r23, r18
 9b2:	b0 0d       	add	r27, r0
 9b4:	e1 1d       	adc	r30, r1
 9b6:	f9 1f       	adc	r31, r25
 9b8:	63 9f       	mul	r22, r19
 9ba:	b0 0d       	add	r27, r0
 9bc:	e1 1d       	adc	r30, r1
 9be:	f9 1f       	adc	r31, r25
 9c0:	bd 01       	movw	r22, r26
 9c2:	cf 01       	movw	r24, r30
 9c4:	11 24       	eor	r1, r1
 9c6:	08 95       	ret

000009c8 <__udivmodsi4>:
 9c8:	a1 e2       	ldi	r26, 0x21	; 33
 9ca:	1a 2e       	mov	r1, r26
 9cc:	aa 1b       	sub	r26, r26
 9ce:	bb 1b       	sub	r27, r27
 9d0:	fd 01       	movw	r30, r26
 9d2:	0d c0       	rjmp	.+26     	; 0x9ee <__udivmodsi4_ep>

000009d4 <__udivmodsi4_loop>:
 9d4:	aa 1f       	adc	r26, r26
 9d6:	bb 1f       	adc	r27, r27
 9d8:	ee 1f       	adc	r30, r30
 9da:	ff 1f       	adc	r31, r31
 9dc:	a2 17       	cp	r26, r18
 9de:	b3 07       	cpc	r27, r19
 9e0:	e4 07       	cpc	r30, r20
 9e2:	f5 07       	cpc	r31, r21
 9e4:	20 f0       	brcs	.+8      	; 0x9ee <__udivmodsi4_ep>
 9e6:	a2 1b       	sub	r26, r18
 9e8:	b3 0b       	sbc	r27, r19
 9ea:	e4 0b       	sbc	r30, r20
 9ec:	f5 0b       	sbc	r31, r21

000009ee <__udivmodsi4_ep>:
 9ee:	66 1f       	adc	r22, r22
 9f0:	77 1f       	adc	r23, r23
 9f2:	88 1f       	adc	r24, r24
 9f4:	99 1f       	adc	r25, r25
 9f6:	1a 94       	dec	r1
 9f8:	69 f7       	brne	.-38     	; 0x9d4 <__udivmodsi4_loop>
 9fa:	60 95       	com	r22
 9fc:	70 95       	com	r23
 9fe:	80 95       	com	r24
 a00:	90 95       	com	r25
 a02:	9b 01       	movw	r18, r22
 a04:	ac 01       	movw	r20, r24
 a06:	bd 01       	movw	r22, r26
 a08:	cf 01       	movw	r24, r30
 a0a:	08 95       	ret
