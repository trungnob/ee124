
drive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000810  000008a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000810  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000075  00800104  00800104  000008a8  2**0
                  ALLOC
  3 .noinit       00000000  00800179  00800179  000008a8  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  000008a8  2**0
                  CONTENTS
  5 .stab         0000036c  00000000  00000000  000008a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000084  00000000  00000000  00000c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000014  00000000  00000000  00000c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000145  00000000  00000000  00000cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000336  00000000  00000000  00000df1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000134  00000000  00000000  00001127  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000005bc  00000000  00000000  0000125b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000018d  00000000  00000000  00001817  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  2c:	0c 94 22 03 	jmp	0x644 <__vector_11>
  30:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  48:	0c 94 fa 02 	jmp	0x5f4 <__vector_18>
  4c:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e1       	ldi	r30, 0x10	; 16
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 37       	cpi	r26, 0x79	; 121
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0c 94 37 02 	jmp	0x46e <main>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0x0 <__vectors>

000000a2 <initialize>:

// Initialize the Mind Control's ATmega168 microcontroller
void initialize(void)
{
  cli();
  a2:	f8 94       	cli

  // Set I/O pins
  DDRB = 0x10;
  a4:	80 e1       	ldi	r24, 0x10	; 16
  a6:	84 b9       	out	0x04, r24	; 4
  PORTB = 0xCF;
  a8:	8f ec       	ldi	r24, 0xCF	; 207
  aa:	85 b9       	out	0x05, r24	; 5
  DDRC = 0x00;
  ac:	17 b8       	out	0x07, r1	; 7
  PORTC = 0xFF;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	88 b9       	out	0x08, r24	; 8
  DDRD = 0xE6;
  b2:	86 ee       	ldi	r24, 0xE6	; 230
  b4:	8a b9       	out	0x0a, r24	; 10
  PORTD = 0x7D;
  b6:	8d e7       	ldi	r24, 0x7D	; 125
  b8:	8b b9       	out	0x0b, r24	; 11

  // Set up timer 1 to generate an interrupt every 1 ms
  TCCR1A = 0x00;
  ba:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = (_BV(WGM12) | _BV(CS12));
  be:	8c e0       	ldi	r24, 0x0C	; 12
  c0:	80 93 81 00 	sts	0x0081, r24
  OCR1A = 71;
  c4:	87 e4       	ldi	r24, 0x47	; 71
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	90 93 89 00 	sts	0x0089, r25
  cc:	80 93 88 00 	sts	0x0088, r24
  TIMSK1 = _BV(OCIE1A);
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	80 93 6f 00 	sts	0x006F, r24

  // Set up the serial port with rx interrupt
  UBRR0 = 19;
  d6:	83 e1       	ldi	r24, 0x13	; 19
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	90 93 c5 00 	sts	0x00C5, r25
  de:	80 93 c4 00 	sts	0x00C4, r24
  UCSR0B = (_BV(RXCIE0) | _BV(TXEN0) | _BV(RXEN0));
  e2:	88 e9       	ldi	r24, 0x98	; 152
  e4:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = (_BV(UCSZ00) | _BV(UCSZ01));
  e8:	86 e0       	ldi	r24, 0x06	; 6
  ea:	80 93 c2 00 	sts	0x00C2, r24
  // Setup ADC 
  // DIDR0 |= 0x20;  // disable digital input on C5
  PRR &= ~_BV(PRADC); // Turn off  power save
  ee:	80 91 64 00 	lds	r24, 0x0064
  f2:	8e 7f       	andi	r24, 0xFE	; 254
  f4:	80 93 64 00 	sts	0x0064, r24
  ADCSRA |= (_BV(ADEN) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0)); // Enabled, prescaler = 128
  f8:	80 91 7a 00 	lds	r24, 0x007A
  fc:	87 68       	ori	r24, 0x87	; 135
  fe:	80 93 7a 00 	sts	0x007A, r24
// |=my_ADLAR;
  ADMUX |= (0x40 ); // set voltage reference
 102:	80 91 7c 00 	lds	r24, 0x007C
 106:	80 64       	ori	r24, 0x40	; 64
 108:	80 93 7c 00 	sts	0x007C, r24
  // Turn on interrupts
  sei();
 10c:	78 94       	sei
 10e:	08 95       	ret

00000110 <byteTx>:
 110:	98 2f       	mov	r25, r24
 112:	80 91 c0 00 	lds	r24, 0x00C0
 116:	85 ff       	sbrs	r24, 5
 118:	fc cf       	rjmp	.-8      	; 0x112 <byteTx+0x2>
 11a:	90 93 c6 00 	sts	0x00C6, r25
 11e:	08 95       	ret

00000120 <defineSongs>:
}




void powerOnRobot(void)
{
  // If Create's power is off, turn it on
  if(!RobotIsOn)
  {
      while(!RobotIsOn)
      {
          RobotPwrToggleLow;
          delayMs(500);  // Delay in this state
          RobotPwrToggleHigh;  // Low to high transition to toggle power
          delayMs(100);  // Delay in this state
          RobotPwrToggleLow;
      }
      delayMs(3500);  // Delay for startup
  }
}




// Switch the baud rate on both Create and module
void baud(uint8_t baud_code)
{
  if(baud_code <= 11)
  {
    byteTx(CmdBaud);
    UCSR0A |= _BV(TXC0);
    byteTx(baud_code);
    // Wait until transmit is complete
    while(!(UCSR0A & _BV(TXC0))) ;

    cli();

    // Switch the baud rate register
    if(baud_code == Baud115200)
      UBRR0 = Ubrr115200;
    else if(baud_code == Baud57600)
      UBRR0 = Ubrr57600;
    else if(baud_code == Baud38400)
      UBRR0 = Ubrr38400;
    else if(baud_code == Baud28800)
      UBRR0 = Ubrr28800;
    else if(baud_code == Baud19200)
      UBRR0 = Ubrr19200;
    else if(baud_code == Baud14400)
      UBRR0 = Ubrr14400;
    else if(baud_code == Baud9600)
      UBRR0 = Ubrr9600;
    else if(baud_code == Baud4800)
      UBRR0 = Ubrr4800;
    else if(baud_code == Baud2400)
      UBRR0 = Ubrr2400;
    else if(baud_code == Baud1200)
      UBRR0 = Ubrr1200;
    else if(baud_code == Baud600)
      UBRR0 = Ubrr600;
    else if(baud_code == Baud300)
      UBRR0 = Ubrr300;

    sei();

    delayMs(100);
  }
}




// Send Create drive commands in terms of velocity and radius
void drive(int16_t velocity, int16_t radius)
{
  byteTx(CmdDrive);
  byteTx((uint8_t)((velocity >> 8) & 0x00FF));
  byteTx((uint8_t)(velocity & 0x00FF));
  byteTx((uint8_t)((radius >> 8) & 0x00FF));
  byteTx((uint8_t)(radius & 0x00FF));
}




// Return an angle value in the range 53 to 180 (degrees)
uint16_t randomAngle(void)
{
    return (53 + ((uint16_t)(random() & 0xFF) >> 1));
}



// Define songs to be played later
void defineSongs(void)
{
  // Reset song
  byteTx(CmdSong);
 120:	8c e8       	ldi	r24, 0x8C	; 140
 122:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(RESET_SONG);
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(4);
 12c:	84 e0       	ldi	r24, 0x04	; 4
 12e:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(60);
 132:	8c e3       	ldi	r24, 0x3C	; 60
 134:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(6);
 138:	86 e0       	ldi	r24, 0x06	; 6
 13a:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(72);
 13e:	88 e4       	ldi	r24, 0x48	; 72
 140:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(6);
 144:	86 e0       	ldi	r24, 0x06	; 6
 146:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(84);
 14a:	84 e5       	ldi	r24, 0x54	; 84
 14c:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(6);
 150:	86 e0       	ldi	r24, 0x06	; 6
 152:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(96);
 156:	80 e6       	ldi	r24, 0x60	; 96
 158:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(6);
 15c:	86 e0       	ldi	r24, 0x06	; 6
 15e:	0e 94 88 00 	call	0x110 <byteTx>

  // Start song
  byteTx(CmdSong);
 162:	8c e8       	ldi	r24, 0x8C	; 140
 164:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(START_SONG);
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(6);
 16e:	86 e0       	ldi	r24, 0x06	; 6
 170:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(69);
 174:	85 e4       	ldi	r24, 0x45	; 69
 176:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(18);
 17a:	82 e1       	ldi	r24, 0x12	; 18
 17c:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(72);
 180:	88 e4       	ldi	r24, 0x48	; 72
 182:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(12);
 186:	8c e0       	ldi	r24, 0x0C	; 12
 188:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(74);
 18c:	8a e4       	ldi	r24, 0x4A	; 74
 18e:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(12);
 192:	8c e0       	ldi	r24, 0x0C	; 12
 194:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(72);
 198:	88 e4       	ldi	r24, 0x48	; 72
 19a:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(12);
 19e:	8c e0       	ldi	r24, 0x0C	; 12
 1a0:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(69);
 1a4:	85 e4       	ldi	r24, 0x45	; 69
 1a6:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(12);
 1aa:	8c e0       	ldi	r24, 0x0C	; 12
 1ac:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(77);
 1b0:	8d e4       	ldi	r24, 0x4D	; 77
 1b2:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(24);
 1b6:	88 e1       	ldi	r24, 0x18	; 24
 1b8:	0e 94 88 00 	call	0x110 <byteTx>

  // Bump song
  byteTx(CmdSong);
 1bc:	8c e8       	ldi	r24, 0x8C	; 140
 1be:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(BUMP_SONG);
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(2);
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(74);
 1ce:	8a e4       	ldi	r24, 0x4A	; 74
 1d0:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(12);
 1d4:	8c e0       	ldi	r24, 0x0C	; 12
 1d6:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(59);
 1da:	8b e3       	ldi	r24, 0x3B	; 59
 1dc:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(24);
 1e0:	88 e1       	ldi	r24, 0x18	; 24
 1e2:	0e 94 88 00 	call	0x110 <byteTx>

  // End song
  byteTx(CmdSong);
 1e6:	8c e8       	ldi	r24, 0x8C	; 140
 1e8:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(END_SONG);
 1ec:	83 e0       	ldi	r24, 0x03	; 3
 1ee:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(5);
 1f2:	85 e0       	ldi	r24, 0x05	; 5
 1f4:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(77);
 1f8:	8d e4       	ldi	r24, 0x4D	; 77
 1fa:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(18);
 1fe:	82 e1       	ldi	r24, 0x12	; 18
 200:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(74);
 204:	8a e4       	ldi	r24, 0x4A	; 74
 206:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(12);
 20a:	8c e0       	ldi	r24, 0x0C	; 12
 20c:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(72);
 210:	88 e4       	ldi	r24, 0x48	; 72
 212:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(12);
 216:	8c e0       	ldi	r24, 0x0C	; 12
 218:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(69);
 21c:	85 e4       	ldi	r24, 0x45	; 69
 21e:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(12);
 222:	8c e0       	ldi	r24, 0x0C	; 12
 224:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(65);
 228:	81 e4       	ldi	r24, 0x41	; 65
 22a:	0e 94 88 00 	call	0x110 <byteTx>
  byteTx(24);
 22e:	88 e1       	ldi	r24, 0x18	; 24
 230:	0e 94 88 00 	call	0x110 <byteTx>
 234:	08 95       	ret

00000236 <drive>:
 236:	ef 92       	push	r14
 238:	ff 92       	push	r15
 23a:	0f 93       	push	r16
 23c:	1f 93       	push	r17
 23e:	8c 01       	movw	r16, r24
 240:	7b 01       	movw	r14, r22
 242:	89 e8       	ldi	r24, 0x89	; 137
 244:	0e 94 88 00 	call	0x110 <byteTx>
 248:	81 2f       	mov	r24, r17
 24a:	99 27       	eor	r25, r25
 24c:	87 fd       	sbrc	r24, 7
 24e:	9a 95       	dec	r25
 250:	0e 94 88 00 	call	0x110 <byteTx>
 254:	80 2f       	mov	r24, r16
 256:	0e 94 88 00 	call	0x110 <byteTx>
 25a:	8f 2d       	mov	r24, r15
 25c:	99 27       	eor	r25, r25
 25e:	87 fd       	sbrc	r24, 7
 260:	9a 95       	dec	r25
 262:	0e 94 88 00 	call	0x110 <byteTx>
 266:	8e 2d       	mov	r24, r14
 268:	0e 94 88 00 	call	0x110 <byteTx>
 26c:	1f 91       	pop	r17
 26e:	0f 91       	pop	r16
 270:	ff 90       	pop	r15
 272:	ef 90       	pop	r14
 274:	08 95       	ret

00000276 <delayAndUpdateSensors>:
 276:	21 e0       	ldi	r18, 0x01	; 1
 278:	20 93 0e 01 	sts	0x010E, r18
 27c:	90 93 10 01 	sts	0x0110, r25
 280:	80 93 0f 01 	sts	0x010F, r24
 284:	80 91 0e 01 	lds	r24, 0x010E
 288:	88 23       	and	r24, r24
 28a:	09 f4       	brne	.+2      	; 0x28e <delayAndUpdateSensors+0x18>
 28c:	42 c0       	rjmp	.+132    	; 0x312 <delayAndUpdateSensors+0x9c>
 28e:	80 91 0d 01 	lds	r24, 0x010D
 292:	88 23       	and	r24, r24
 294:	b9 f7       	brne	.-18     	; 0x284 <delayAndUpdateSensors+0xe>
 296:	a1 e1       	ldi	r26, 0x11	; 17
 298:	b1 e0       	ldi	r27, 0x01	; 1
 29a:	e5 e4       	ldi	r30, 0x45	; 69
 29c:	f1 e0       	ldi	r31, 0x01	; 1
 29e:	93 e3       	ldi	r25, 0x33	; 51
 2a0:	8d 91       	ld	r24, X+
 2a2:	81 93       	st	Z+, r24
 2a4:	91 50       	subi	r25, 0x01	; 1
 2a6:	97 ff       	sbrs	r25, 7
 2a8:	fb cf       	rjmp	.-10     	; 0x2a0 <delayAndUpdateSensors+0x2a>
 2aa:	80 91 51 01 	lds	r24, 0x0151
 2ae:	99 27       	eor	r25, r25
 2b0:	38 2f       	mov	r19, r24
 2b2:	22 27       	eor	r18, r18
 2b4:	80 91 52 01 	lds	r24, 0x0152
 2b8:	99 27       	eor	r25, r25
 2ba:	28 2b       	or	r18, r24
 2bc:	39 2b       	or	r19, r25
 2be:	80 91 0a 01 	lds	r24, 0x010A
 2c2:	90 91 0b 01 	lds	r25, 0x010B
 2c6:	82 0f       	add	r24, r18
 2c8:	93 1f       	adc	r25, r19
 2ca:	90 93 0b 01 	sts	0x010B, r25
 2ce:	80 93 0a 01 	sts	0x010A, r24
 2d2:	80 91 53 01 	lds	r24, 0x0153
 2d6:	99 27       	eor	r25, r25
 2d8:	38 2f       	mov	r19, r24
 2da:	22 27       	eor	r18, r18
 2dc:	80 91 54 01 	lds	r24, 0x0154
 2e0:	99 27       	eor	r25, r25
 2e2:	28 2b       	or	r18, r24
 2e4:	39 2b       	or	r19, r25
 2e6:	80 91 08 01 	lds	r24, 0x0108
 2ea:	90 91 09 01 	lds	r25, 0x0109
 2ee:	82 0f       	add	r24, r18
 2f0:	93 1f       	adc	r25, r19
 2f2:	90 93 09 01 	sts	0x0109, r25
 2f6:	80 93 08 01 	sts	0x0108, r24
 2fa:	8e e8       	ldi	r24, 0x8E	; 142
 2fc:	0e 94 88 00 	call	0x110 <byteTx>
 300:	86 e0       	ldi	r24, 0x06	; 6
 302:	0e 94 88 00 	call	0x110 <byteTx>
 306:	10 92 0c 01 	sts	0x010C, r1
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	80 93 0d 01 	sts	0x010D, r24
 310:	b9 cf       	rjmp	.-142    	; 0x284 <delayAndUpdateSensors+0xe>
 312:	08 95       	ret

00000314 <delayMs>:
 314:	9c 01       	movw	r18, r24
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	80 93 0e 01 	sts	0x010E, r24
 31c:	30 93 10 01 	sts	0x0110, r19
 320:	20 93 0f 01 	sts	0x010F, r18
 324:	80 91 0e 01 	lds	r24, 0x010E
 328:	88 23       	and	r24, r24
 32a:	e1 f7       	brne	.-8      	; 0x324 <delayMs+0x10>
 32c:	08 95       	ret

0000032e <baud>:
 32e:	cf 93       	push	r28
 330:	c8 2f       	mov	r28, r24
 332:	8c 30       	cpi	r24, 0x0C	; 12
 334:	08 f0       	brcs	.+2      	; 0x338 <baud+0xa>
 336:	54 c0       	rjmp	.+168    	; 0x3e0 <baud+0xb2>
 338:	81 e8       	ldi	r24, 0x81	; 129
 33a:	0e 94 88 00 	call	0x110 <byteTx>
 33e:	80 91 c0 00 	lds	r24, 0x00C0
 342:	80 64       	ori	r24, 0x40	; 64
 344:	80 93 c0 00 	sts	0x00C0, r24
 348:	8c 2f       	mov	r24, r28
 34a:	0e 94 88 00 	call	0x110 <byteTx>
 34e:	80 91 c0 00 	lds	r24, 0x00C0
 352:	86 ff       	sbrs	r24, 6
 354:	fc cf       	rjmp	.-8      	; 0x34e <baud+0x20>
 356:	f8 94       	cli
 358:	cb 30       	cpi	r28, 0x0B	; 11
 35a:	19 f4       	brne	.+6      	; 0x362 <baud+0x34>
 35c:	89 e0       	ldi	r24, 0x09	; 9
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	36 c0       	rjmp	.+108    	; 0x3ce <baud+0xa0>
 362:	ca 30       	cpi	r28, 0x0A	; 10
 364:	19 f4       	brne	.+6      	; 0x36c <baud+0x3e>
 366:	83 e1       	ldi	r24, 0x13	; 19
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	31 c0       	rjmp	.+98     	; 0x3ce <baud+0xa0>
 36c:	c9 30       	cpi	r28, 0x09	; 9
 36e:	19 f4       	brne	.+6      	; 0x376 <baud+0x48>
 370:	8d e1       	ldi	r24, 0x1D	; 29
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	2c c0       	rjmp	.+88     	; 0x3ce <baud+0xa0>
 376:	c8 30       	cpi	r28, 0x08	; 8
 378:	19 f4       	brne	.+6      	; 0x380 <baud+0x52>
 37a:	87 e2       	ldi	r24, 0x27	; 39
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	27 c0       	rjmp	.+78     	; 0x3ce <baud+0xa0>
 380:	c7 30       	cpi	r28, 0x07	; 7
 382:	19 f4       	brne	.+6      	; 0x38a <baud+0x5c>
 384:	8b e3       	ldi	r24, 0x3B	; 59
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	22 c0       	rjmp	.+68     	; 0x3ce <baud+0xa0>
 38a:	c6 30       	cpi	r28, 0x06	; 6
 38c:	19 f4       	brne	.+6      	; 0x394 <baud+0x66>
 38e:	8f e4       	ldi	r24, 0x4F	; 79
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	1d c0       	rjmp	.+58     	; 0x3ce <baud+0xa0>
 394:	c5 30       	cpi	r28, 0x05	; 5
 396:	19 f4       	brne	.+6      	; 0x39e <baud+0x70>
 398:	87 e7       	ldi	r24, 0x77	; 119
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	18 c0       	rjmp	.+48     	; 0x3ce <baud+0xa0>
 39e:	c4 30       	cpi	r28, 0x04	; 4
 3a0:	19 f4       	brne	.+6      	; 0x3a8 <baud+0x7a>
 3a2:	8f ee       	ldi	r24, 0xEF	; 239
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	13 c0       	rjmp	.+38     	; 0x3ce <baud+0xa0>
 3a8:	c3 30       	cpi	r28, 0x03	; 3
 3aa:	19 f4       	brne	.+6      	; 0x3b2 <baud+0x84>
 3ac:	8f ed       	ldi	r24, 0xDF	; 223
 3ae:	91 e0       	ldi	r25, 0x01	; 1
 3b0:	0e c0       	rjmp	.+28     	; 0x3ce <baud+0xa0>
 3b2:	c2 30       	cpi	r28, 0x02	; 2
 3b4:	19 f4       	brne	.+6      	; 0x3bc <baud+0x8e>
 3b6:	8f eb       	ldi	r24, 0xBF	; 191
 3b8:	93 e0       	ldi	r25, 0x03	; 3
 3ba:	09 c0       	rjmp	.+18     	; 0x3ce <baud+0xa0>
 3bc:	c1 30       	cpi	r28, 0x01	; 1
 3be:	19 f4       	brne	.+6      	; 0x3c6 <baud+0x98>
 3c0:	8f e7       	ldi	r24, 0x7F	; 127
 3c2:	97 e0       	ldi	r25, 0x07	; 7
 3c4:	04 c0       	rjmp	.+8      	; 0x3ce <baud+0xa0>
 3c6:	cc 23       	and	r28, r28
 3c8:	31 f4       	brne	.+12     	; 0x3d6 <baud+0xa8>
 3ca:	8f ef       	ldi	r24, 0xFF	; 255
 3cc:	9e e0       	ldi	r25, 0x0E	; 14
 3ce:	90 93 c5 00 	sts	0x00C5, r25
 3d2:	80 93 c4 00 	sts	0x00C4, r24
 3d6:	78 94       	sei
 3d8:	84 e6       	ldi	r24, 0x64	; 100
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	0e 94 8a 01 	call	0x314 <delayMs>
 3e0:	cf 91       	pop	r28
 3e2:	08 95       	ret

000003e4 <powerOnRobot>:
 3e4:	1d 99       	sbic	0x03, 5	; 3
 3e6:	13 c0       	rjmp	.+38     	; 0x40e <powerOnRobot+0x2a>
 3e8:	1d 99       	sbic	0x03, 5	; 3
 3ea:	0d c0       	rjmp	.+26     	; 0x406 <powerOnRobot+0x22>
 3ec:	5f 98       	cbi	0x0b, 7	; 11
 3ee:	84 ef       	ldi	r24, 0xF4	; 244
 3f0:	91 e0       	ldi	r25, 0x01	; 1
 3f2:	0e 94 8a 01 	call	0x314 <delayMs>
 3f6:	5f 9a       	sbi	0x0b, 7	; 11
 3f8:	84 e6       	ldi	r24, 0x64	; 100
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 8a 01 	call	0x314 <delayMs>
 400:	5f 98       	cbi	0x0b, 7	; 11
 402:	1d 9b       	sbis	0x03, 5	; 3
 404:	f3 cf       	rjmp	.-26     	; 0x3ec <powerOnRobot+0x8>
 406:	8c ea       	ldi	r24, 0xAC	; 172
 408:	9d e0       	ldi	r25, 0x0D	; 13
 40a:	0e 94 8a 01 	call	0x314 <delayMs>
 40e:	08 95       	ret

00000410 <ReadX>:
 410:	80 91 7c 00 	lds	r24, 0x007C
 414:	86 60       	ori	r24, 0x06	; 6
 416:	80 93 7c 00 	sts	0x007C, r24
 41a:	80 91 7a 00 	lds	r24, 0x007A
 41e:	80 64       	ori	r24, 0x40	; 64
 420:	80 93 7a 00 	sts	0x007A, r24
 424:	80 91 7a 00 	lds	r24, 0x007A
 428:	86 fd       	sbrc	r24, 6
 42a:	fc cf       	rjmp	.-8      	; 0x424 <ReadX+0x14>
 42c:	80 91 78 00 	lds	r24, 0x0078
 430:	90 91 79 00 	lds	r25, 0x0079
 434:	90 93 07 01 	sts	0x0107, r25
 438:	80 93 06 01 	sts	0x0106, r24
 43c:	5d 98       	cbi	0x0b, 5	; 11
 43e:	5e 98       	cbi	0x0b, 6	; 11
 440:	80 91 7c 00 	lds	r24, 0x007C
 444:	87 60       	ori	r24, 0x07	; 7
 446:	80 93 7c 00 	sts	0x007C, r24
 44a:	80 91 7a 00 	lds	r24, 0x007A
 44e:	80 64       	ori	r24, 0x40	; 64
 450:	80 93 7a 00 	sts	0x007A, r24
 454:	80 91 7a 00 	lds	r24, 0x007A
 458:	86 fd       	sbrc	r24, 6
 45a:	fc cf       	rjmp	.-8      	; 0x454 <ReadX+0x44>
 45c:	80 91 78 00 	lds	r24, 0x0078
 460:	90 91 79 00 	lds	r25, 0x0079
 464:	90 93 05 01 	sts	0x0105, r25
 468:	80 93 04 01 	sts	0x0104, r24
 46c:	08 95       	ret

0000046e <main>:
 46e:	cf ef       	ldi	r28, 0xFF	; 255
 470:	d4 e0       	ldi	r29, 0x04	; 4
 472:	de bf       	out	0x3e, r29	; 62
 474:	cd bf       	out	0x3d, r28	; 61
 476:	0e 94 51 00 	call	0xa2 <initialize>
 47a:	8b b1       	in	r24, 0x0b	; 11
 47c:	80 66       	ori	r24, 0x60	; 96
 47e:	8b b9       	out	0x0b, r24	; 11
 480:	0e 94 f2 01 	call	0x3e4 <powerOnRobot>
 484:	80 e8       	ldi	r24, 0x80	; 128
 486:	0e 94 88 00 	call	0x110 <byteTx>
 48a:	8a e0       	ldi	r24, 0x0A	; 10
 48c:	0e 94 97 01 	call	0x32e <baud>
 490:	0e 94 90 00 	call	0x120 <defineSongs>
 494:	82 e8       	ldi	r24, 0x82	; 130
 496:	0e 94 88 00 	call	0x110 <byteTx>
 49a:	84 e8       	ldi	r24, 0x84	; 132
 49c:	0e 94 88 00 	call	0x110 <byteTx>
 4a0:	60 e0       	ldi	r22, 0x00	; 0
 4a2:	70 e8       	ldi	r23, 0x80	; 128
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	0e 94 1b 01 	call	0x236 <drive>
 4ac:	8d e8       	ldi	r24, 0x8D	; 141
 4ae:	0e 94 88 00 	call	0x110 <byteTx>
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	0e 94 88 00 	call	0x110 <byteTx>
 4b8:	8e ee       	ldi	r24, 0xEE	; 238
 4ba:	92 e0       	ldi	r25, 0x02	; 2
 4bc:	0e 94 3b 01 	call	0x276 <delayAndUpdateSensors>
 4c0:	8b e8       	ldi	r24, 0x8B	; 139
 4c2:	0e 94 88 00 	call	0x110 <byteTx>
 4c6:	8a e0       	ldi	r24, 0x0A	; 10
 4c8:	0e 94 88 00 	call	0x110 <byteTx>
 4cc:	80 e8       	ldi	r24, 0x80	; 128
 4ce:	0e 94 88 00 	call	0x110 <byteTx>
 4d2:	8f ef       	ldi	r24, 0xFF	; 255
 4d4:	0e 94 88 00 	call	0x110 <byteTx>
 4d8:	8b b1       	in	r24, 0x0b	; 11
 4da:	80 66       	ori	r24, 0x60	; 96
 4dc:	8b b9       	out	0x0b, r24	; 11
 4de:	88 ee       	ldi	r24, 0xE8	; 232
 4e0:	93 e0       	ldi	r25, 0x03	; 3
 4e2:	0e 94 8a 01 	call	0x314 <delayMs>
 4e6:	0e 94 08 02 	call	0x410 <ReadX>
 4ea:	8c e8       	ldi	r24, 0x8C	; 140
 4ec:	0e 94 88 00 	call	0x110 <byteTx>
 4f0:	84 e0       	ldi	r24, 0x04	; 4
 4f2:	0e 94 88 00 	call	0x110 <byteTx>
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	0e 94 88 00 	call	0x110 <byteTx>
 4fc:	80 91 06 01 	lds	r24, 0x0106
 500:	90 91 07 01 	lds	r25, 0x0107
 504:	73 e0       	ldi	r23, 0x03	; 3
 506:	95 95       	asr	r25
 508:	87 95       	ror	r24
 50a:	7a 95       	dec	r23
 50c:	e1 f7       	brne	.-8      	; 0x506 <__stack+0x7>
 50e:	0e 94 88 00 	call	0x110 <byteTx>
 512:	80 e4       	ldi	r24, 0x40	; 64
 514:	0e 94 88 00 	call	0x110 <byteTx>
 518:	8d e8       	ldi	r24, 0x8D	; 141
 51a:	0e 94 88 00 	call	0x110 <byteTx>
 51e:	84 e0       	ldi	r24, 0x04	; 4
 520:	0e 94 88 00 	call	0x110 <byteTx>
 524:	8c ed       	ldi	r24, 0xDC	; 220
 526:	95 e0       	ldi	r25, 0x05	; 5
 528:	0e 94 8a 01 	call	0x314 <delayMs>
 52c:	8c e8       	ldi	r24, 0x8C	; 140
 52e:	0e 94 88 00 	call	0x110 <byteTx>
 532:	86 e0       	ldi	r24, 0x06	; 6
 534:	0e 94 88 00 	call	0x110 <byteTx>
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	0e 94 88 00 	call	0x110 <byteTx>
 53e:	80 e4       	ldi	r24, 0x40	; 64
 540:	0e 94 88 00 	call	0x110 <byteTx>
 544:	80 e4       	ldi	r24, 0x40	; 64
 546:	0e 94 88 00 	call	0x110 <byteTx>
 54a:	8d e8       	ldi	r24, 0x8D	; 141
 54c:	0e 94 88 00 	call	0x110 <byteTx>
 550:	86 e0       	ldi	r24, 0x06	; 6
 552:	0e 94 88 00 	call	0x110 <byteTx>
 556:	8c ed       	ldi	r24, 0xDC	; 220
 558:	95 e0       	ldi	r25, 0x05	; 5
 55a:	0e 94 8a 01 	call	0x314 <delayMs>
 55e:	20 91 06 01 	lds	r18, 0x0106
 562:	30 91 07 01 	lds	r19, 0x0107
 566:	80 91 04 01 	lds	r24, 0x0104
 56a:	90 91 05 01 	lds	r25, 0x0105
 56e:	28 1b       	sub	r18, r24
 570:	39 0b       	sbc	r19, r25
 572:	37 ff       	sbrs	r19, 7
 574:	03 c0       	rjmp	.+6      	; 0x57c <__stack+0x7d>
 576:	30 95       	com	r19
 578:	21 95       	neg	r18
 57a:	3f 4f       	sbci	r19, 0xFF	; 255
 57c:	35 95       	asr	r19
 57e:	27 95       	ror	r18
 580:	35 95       	asr	r19
 582:	27 95       	ror	r18
 584:	23 2b       	or	r18, r19
 586:	89 f5       	brne	.+98     	; 0x5ea <__stack+0xeb>
 588:	8c e8       	ldi	r24, 0x8C	; 140
 58a:	0e 94 88 00 	call	0x110 <byteTx>
 58e:	85 e0       	ldi	r24, 0x05	; 5
 590:	0e 94 88 00 	call	0x110 <byteTx>
 594:	82 e0       	ldi	r24, 0x02	; 2
 596:	0e 94 88 00 	call	0x110 <byteTx>
 59a:	80 91 06 01 	lds	r24, 0x0106
 59e:	90 91 07 01 	lds	r25, 0x0107
 5a2:	53 e0       	ldi	r21, 0x03	; 3
 5a4:	95 95       	asr	r25
 5a6:	87 95       	ror	r24
 5a8:	5a 95       	dec	r21
 5aa:	e1 f7       	brne	.-8      	; 0x5a4 <__stack+0xa5>
 5ac:	0e 94 88 00 	call	0x110 <byteTx>
 5b0:	80 e4       	ldi	r24, 0x40	; 64
 5b2:	0e 94 88 00 	call	0x110 <byteTx>
 5b6:	80 91 06 01 	lds	r24, 0x0106
 5ba:	90 91 07 01 	lds	r25, 0x0107
 5be:	43 e0       	ldi	r20, 0x03	; 3
 5c0:	95 95       	asr	r25
 5c2:	87 95       	ror	r24
 5c4:	4a 95       	dec	r20
 5c6:	e1 f7       	brne	.-8      	; 0x5c0 <__stack+0xc1>
 5c8:	0e 94 88 00 	call	0x110 <byteTx>
 5cc:	80 e1       	ldi	r24, 0x10	; 16
 5ce:	0e 94 88 00 	call	0x110 <byteTx>
 5d2:	8d e8       	ldi	r24, 0x8D	; 141
 5d4:	0e 94 88 00 	call	0x110 <byteTx>
 5d8:	85 e0       	ldi	r24, 0x05	; 5
 5da:	0e 94 88 00 	call	0x110 <byteTx>
 5de:	80 ed       	ldi	r24, 0xD0	; 208
 5e0:	97 e0       	ldi	r25, 0x07	; 7
 5e2:	0e 94 8a 01 	call	0x314 <delayMs>
 5e6:	5d 98       	cbi	0x0b, 5	; 11
 5e8:	5e 9a       	sbi	0x0b, 6	; 11
 5ea:	88 ee       	ldi	r24, 0xE8	; 232
 5ec:	93 e0       	ldi	r25, 0x03	; 3
 5ee:	0e 94 8a 01 	call	0x314 <delayMs>
 5f2:	72 cf       	rjmp	.-284    	; 0x4d8 <main+0x6a>

000005f4 <__vector_18>:
 5f4:	1f 92       	push	r1
 5f6:	0f 92       	push	r0
 5f8:	0f b6       	in	r0, 0x3f	; 63
 5fa:	0f 92       	push	r0
 5fc:	11 24       	eor	r1, r1
 5fe:	8f 93       	push	r24
 600:	9f 93       	push	r25
 602:	ef 93       	push	r30
 604:	ff 93       	push	r31
 606:	90 91 c6 00 	lds	r25, 0x00C6
 60a:	80 91 0d 01 	lds	r24, 0x010D
 60e:	88 23       	and	r24, r24
 610:	81 f0       	breq	.+32     	; 0x632 <__vector_18+0x3e>
 612:	80 91 0c 01 	lds	r24, 0x010C
 616:	e8 2f       	mov	r30, r24
 618:	ff 27       	eor	r31, r31
 61a:	ef 5e       	subi	r30, 0xEF	; 239
 61c:	fe 4f       	sbci	r31, 0xFE	; 254
 61e:	90 83       	st	Z, r25
 620:	8f 5f       	subi	r24, 0xFF	; 255
 622:	80 93 0c 01 	sts	0x010C, r24
 626:	80 91 0c 01 	lds	r24, 0x010C
 62a:	84 33       	cpi	r24, 0x34	; 52
 62c:	10 f0       	brcs	.+4      	; 0x632 <__vector_18+0x3e>
 62e:	10 92 0d 01 	sts	0x010D, r1
 632:	ff 91       	pop	r31
 634:	ef 91       	pop	r30
 636:	9f 91       	pop	r25
 638:	8f 91       	pop	r24
 63a:	0f 90       	pop	r0
 63c:	0f be       	out	0x3f, r0	; 63
 63e:	0f 90       	pop	r0
 640:	1f 90       	pop	r1
 642:	18 95       	reti

00000644 <__vector_11>:
 644:	1f 92       	push	r1
 646:	0f 92       	push	r0
 648:	0f b6       	in	r0, 0x3f	; 63
 64a:	0f 92       	push	r0
 64c:	11 24       	eor	r1, r1
 64e:	8f 93       	push	r24
 650:	9f 93       	push	r25
 652:	80 91 0f 01 	lds	r24, 0x010F
 656:	90 91 10 01 	lds	r25, 0x0110
 65a:	89 2b       	or	r24, r25
 65c:	51 f0       	breq	.+20     	; 0x672 <__vector_11+0x2e>
 65e:	80 91 0f 01 	lds	r24, 0x010F
 662:	90 91 10 01 	lds	r25, 0x0110
 666:	01 97       	sbiw	r24, 0x01	; 1
 668:	90 93 10 01 	sts	0x0110, r25
 66c:	80 93 0f 01 	sts	0x010F, r24
 670:	02 c0       	rjmp	.+4      	; 0x676 <__vector_11+0x32>
 672:	10 92 0e 01 	sts	0x010E, r1
 676:	9f 91       	pop	r25
 678:	8f 91       	pop	r24
 67a:	0f 90       	pop	r0
 67c:	0f be       	out	0x3f, r0	; 63
 67e:	0f 90       	pop	r0
 680:	1f 90       	pop	r1
 682:	18 95       	reti

00000684 <randomAngle>:
 684:	0e 94 b3 03 	call	0x766 <random>
 688:	dc 01       	movw	r26, r24
 68a:	cb 01       	movw	r24, r22
 68c:	90 70       	andi	r25, 0x00	; 0
 68e:	96 95       	lsr	r25
 690:	87 95       	ror	r24
 692:	c5 96       	adiw	r24, 0x35	; 53
 694:	08 95       	ret

00000696 <do_random>:
 696:	af 92       	push	r10
 698:	bf 92       	push	r11
 69a:	cf 92       	push	r12
 69c:	df 92       	push	r13
 69e:	ef 92       	push	r14
 6a0:	ff 92       	push	r15
 6a2:	0f 93       	push	r16
 6a4:	1f 93       	push	r17
 6a6:	cf 93       	push	r28
 6a8:	df 93       	push	r29
 6aa:	ec 01       	movw	r28, r24
 6ac:	e8 80       	ld	r14, Y
 6ae:	f9 80       	ldd	r15, Y+1	; 0x01
 6b0:	0a 81       	ldd	r16, Y+2	; 0x02
 6b2:	1b 81       	ldd	r17, Y+3	; 0x03
 6b4:	c8 01       	movw	r24, r16
 6b6:	b7 01       	movw	r22, r14
 6b8:	2d e1       	ldi	r18, 0x1D	; 29
 6ba:	33 ef       	ldi	r19, 0xF3	; 243
 6bc:	41 e0       	ldi	r20, 0x01	; 1
 6be:	50 e0       	ldi	r21, 0x00	; 0
 6c0:	0e 94 e6 03 	call	0x7cc <__udivmodsi4>
 6c4:	59 01       	movw	r10, r18
 6c6:	6a 01       	movw	r12, r20
 6c8:	c8 01       	movw	r24, r16
 6ca:	b7 01       	movw	r22, r14
 6cc:	2d e1       	ldi	r18, 0x1D	; 29
 6ce:	33 ef       	ldi	r19, 0xF3	; 243
 6d0:	41 e0       	ldi	r20, 0x01	; 1
 6d2:	50 e0       	ldi	r21, 0x00	; 0
 6d4:	0e 94 e6 03 	call	0x7cc <__udivmodsi4>
 6d8:	dc 01       	movw	r26, r24
 6da:	cb 01       	movw	r24, r22
 6dc:	bc 01       	movw	r22, r24
 6de:	cd 01       	movw	r24, r26
 6e0:	27 ea       	ldi	r18, 0xA7	; 167
 6e2:	31 e4       	ldi	r19, 0x41	; 65
 6e4:	40 e0       	ldi	r20, 0x00	; 0
 6e6:	50 e0       	ldi	r21, 0x00	; 0
 6e8:	0e 94 c7 03 	call	0x78e <__mulsi3>
 6ec:	7b 01       	movw	r14, r22
 6ee:	8c 01       	movw	r16, r24
 6f0:	c6 01       	movw	r24, r12
 6f2:	b5 01       	movw	r22, r10
 6f4:	24 e1       	ldi	r18, 0x14	; 20
 6f6:	3b e0       	ldi	r19, 0x0B	; 11
 6f8:	40 e0       	ldi	r20, 0x00	; 0
 6fa:	50 e0       	ldi	r21, 0x00	; 0
 6fc:	0e 94 c7 03 	call	0x78e <__mulsi3>
 700:	dc 01       	movw	r26, r24
 702:	cb 01       	movw	r24, r22
 704:	e8 1a       	sub	r14, r24
 706:	f9 0a       	sbc	r15, r25
 708:	0a 0b       	sbc	r16, r26
 70a:	1b 0b       	sbc	r17, r27
 70c:	1e 14       	cp	r1, r14
 70e:	1f 04       	cpc	r1, r15
 710:	10 06       	cpc	r1, r16
 712:	11 06       	cpc	r1, r17
 714:	44 f0       	brlt	.+16     	; 0x726 <do_random+0x90>
 716:	8f ef       	ldi	r24, 0xFF	; 255
 718:	9f ef       	ldi	r25, 0xFF	; 255
 71a:	af ef       	ldi	r26, 0xFF	; 255
 71c:	bf e7       	ldi	r27, 0x7F	; 127
 71e:	e8 0e       	add	r14, r24
 720:	f9 1e       	adc	r15, r25
 722:	0a 1f       	adc	r16, r26
 724:	1b 1f       	adc	r17, r27
 726:	e8 82       	st	Y, r14
 728:	f9 82       	std	Y+1, r15	; 0x01
 72a:	0a 83       	std	Y+2, r16	; 0x02
 72c:	1b 83       	std	Y+3, r17	; 0x03
 72e:	8f ef       	ldi	r24, 0xFF	; 255
 730:	9f ef       	ldi	r25, 0xFF	; 255
 732:	af ef       	ldi	r26, 0xFF	; 255
 734:	bf e7       	ldi	r27, 0x7F	; 127
 736:	e8 22       	and	r14, r24
 738:	f9 22       	and	r15, r25
 73a:	0a 23       	and	r16, r26
 73c:	1b 23       	and	r17, r27
 73e:	c8 01       	movw	r24, r16
 740:	b7 01       	movw	r22, r14
 742:	df 91       	pop	r29
 744:	cf 91       	pop	r28
 746:	1f 91       	pop	r17
 748:	0f 91       	pop	r16
 74a:	ff 90       	pop	r15
 74c:	ef 90       	pop	r14
 74e:	df 90       	pop	r13
 750:	cf 90       	pop	r12
 752:	bf 90       	pop	r11
 754:	af 90       	pop	r10
 756:	08 95       	ret

00000758 <random_r>:
 758:	0e 94 4b 03 	call	0x696 <do_random>
 75c:	dc 01       	movw	r26, r24
 75e:	cb 01       	movw	r24, r22
 760:	bc 01       	movw	r22, r24
 762:	cd 01       	movw	r24, r26
 764:	08 95       	ret

00000766 <random>:
 766:	80 e0       	ldi	r24, 0x00	; 0
 768:	91 e0       	ldi	r25, 0x01	; 1
 76a:	0e 94 4b 03 	call	0x696 <do_random>
 76e:	dc 01       	movw	r26, r24
 770:	cb 01       	movw	r24, r22
 772:	bc 01       	movw	r22, r24
 774:	cd 01       	movw	r24, r26
 776:	08 95       	ret

00000778 <srandom>:
 778:	dc 01       	movw	r26, r24
 77a:	cb 01       	movw	r24, r22
 77c:	80 93 00 01 	sts	0x0100, r24
 780:	90 93 01 01 	sts	0x0101, r25
 784:	a0 93 02 01 	sts	0x0102, r26
 788:	b0 93 03 01 	sts	0x0103, r27
 78c:	08 95       	ret

0000078e <__mulsi3>:
 78e:	62 9f       	mul	r22, r18
 790:	d0 01       	movw	r26, r0
 792:	73 9f       	mul	r23, r19
 794:	f0 01       	movw	r30, r0
 796:	82 9f       	mul	r24, r18
 798:	e0 0d       	add	r30, r0
 79a:	f1 1d       	adc	r31, r1
 79c:	64 9f       	mul	r22, r20
 79e:	e0 0d       	add	r30, r0
 7a0:	f1 1d       	adc	r31, r1
 7a2:	92 9f       	mul	r25, r18
 7a4:	f0 0d       	add	r31, r0
 7a6:	83 9f       	mul	r24, r19
 7a8:	f0 0d       	add	r31, r0
 7aa:	74 9f       	mul	r23, r20
 7ac:	f0 0d       	add	r31, r0
 7ae:	65 9f       	mul	r22, r21
 7b0:	f0 0d       	add	r31, r0
 7b2:	99 27       	eor	r25, r25
 7b4:	72 9f       	mul	r23, r18
 7b6:	b0 0d       	add	r27, r0
 7b8:	e1 1d       	adc	r30, r1
 7ba:	f9 1f       	adc	r31, r25
 7bc:	63 9f       	mul	r22, r19
 7be:	b0 0d       	add	r27, r0
 7c0:	e1 1d       	adc	r30, r1
 7c2:	f9 1f       	adc	r31, r25
 7c4:	bd 01       	movw	r22, r26
 7c6:	cf 01       	movw	r24, r30
 7c8:	11 24       	eor	r1, r1
 7ca:	08 95       	ret

000007cc <__udivmodsi4>:
 7cc:	a1 e2       	ldi	r26, 0x21	; 33
 7ce:	1a 2e       	mov	r1, r26
 7d0:	aa 1b       	sub	r26, r26
 7d2:	bb 1b       	sub	r27, r27
 7d4:	fd 01       	movw	r30, r26
 7d6:	0d c0       	rjmp	.+26     	; 0x7f2 <__udivmodsi4_ep>

000007d8 <__udivmodsi4_loop>:
 7d8:	aa 1f       	adc	r26, r26
 7da:	bb 1f       	adc	r27, r27
 7dc:	ee 1f       	adc	r30, r30
 7de:	ff 1f       	adc	r31, r31
 7e0:	a2 17       	cp	r26, r18
 7e2:	b3 07       	cpc	r27, r19
 7e4:	e4 07       	cpc	r30, r20
 7e6:	f5 07       	cpc	r31, r21
 7e8:	20 f0       	brcs	.+8      	; 0x7f2 <__udivmodsi4_ep>
 7ea:	a2 1b       	sub	r26, r18
 7ec:	b3 0b       	sbc	r27, r19
 7ee:	e4 0b       	sbc	r30, r20
 7f0:	f5 0b       	sbc	r31, r21

000007f2 <__udivmodsi4_ep>:
 7f2:	66 1f       	adc	r22, r22
 7f4:	77 1f       	adc	r23, r23
 7f6:	88 1f       	adc	r24, r24
 7f8:	99 1f       	adc	r25, r25
 7fa:	1a 94       	dec	r1
 7fc:	69 f7       	brne	.-38     	; 0x7d8 <__udivmodsi4_loop>
 7fe:	60 95       	com	r22
 800:	70 95       	com	r23
 802:	80 95       	com	r24
 804:	90 95       	com	r25
 806:	9b 01       	movw	r18, r22
 808:	ac 01       	movw	r20, r24
 80a:	bd 01       	movw	r22, r26
 80c:	cf 01       	movw	r24, r30
 80e:	08 95       	ret
